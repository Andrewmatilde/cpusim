package calculator

import (
	"math/big"
)

type Calculator struct {
	// 预定义的大整数，用于固定计算负载
	fixedA *big.Int
	fixedB *big.Int
}

func New() *Calculator {
	// 使用两个大的斐波那契数作为固定值
	// 这些数字足够大，可以产生稳定的计算负载
	aStr := "2880067194370816120644610455829962483185501917620692224397304104778127458676217953643117334878695131859429836952154761693830389035528044354140945088342024665891968238718079772026296377040200072304652621307827910323170156202463051726394584224810881086733579916162208994068612194381473929051622534080014300638"
	bStr := "1779979416004714189467320566394261804446081555438796352667333717589358926611567424068866841502923908159782190963624767223188363365351635216699162033760292932018759066895369357901279467026234141587188802817062107843204994879232196724504031326615296222545205250836302324037612148996148380440552073140079240097"

	c := &Calculator{
		fixedA: new(big.Int),
		fixedB: new(big.Int),
	}

	c.fixedA.SetString(aStr, 10)
	c.fixedB.SetString(bStr, 10)

	return c
}

// GCD 计算预定义大整数的最大公约数
func (c *Calculator) GCD() *big.Int {
	// 使用固定的大整数进行计算
	x := new(big.Int).Set(c.fixedA)
	y := new(big.Int).Set(c.fixedB)

	for y.Sign() != 0 {
		temp := new(big.Int)
		temp.Mod(x, y)
		x = y
		y = temp
	}

	return x
}

// GetFixedNumbers 返回当前使用的固定大整数
func (c *Calculator) GetFixedNumbers() (a, b *big.Int) {
	return c.fixedA, c.fixedB
}
