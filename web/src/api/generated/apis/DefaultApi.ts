/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ExperimentData,
  ExperimentResponse,
  HealthResponse,
  ServiceConfig,
  StartExperimentRequest,
  StatusResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExperimentDataFromJSON,
    ExperimentDataToJSON,
    ExperimentResponseFromJSON,
    ExperimentResponseToJSON,
    HealthResponseFromJSON,
    HealthResponseToJSON,
    ServiceConfigFromJSON,
    ServiceConfigToJSON,
    StartExperimentRequestFromJSON,
    StartExperimentRequestToJSON,
    StatusResponseFromJSON,
    StatusResponseToJSON,
} from '../models/index';

export interface GetExperimentDataRequest {
    experimentId: string;
}

export interface StartExperimentOperationRequest {
    startExperimentRequest: StartExperimentRequest;
}

export interface StopExperimentRequest {
    experimentId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get experiment data
     */
    async getExperimentDataRaw(requestParameters: GetExperimentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentData>> {
        if (requestParameters['experimentId'] == null) {
            throw new runtime.RequiredError(
                'experimentId',
                'Required parameter "experimentId" was null or undefined when calling getExperimentData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiments/{experimentId}`;
        urlPath = urlPath.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters['experimentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentDataFromJSON(jsonValue));
    }

    /**
     * Get experiment data
     */
    async getExperimentData(requestParameters: GetExperimentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentData> {
        const response = await this.getExperimentDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get service configuration
     */
    async getServiceConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConfigFromJSON(jsonValue));
    }

    /**
     * Get service configuration
     */
    async getServiceConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceConfig> {
        const response = await this.getServiceConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get experiment manager status
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
    }

    /**
     * Get experiment manager status
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.getStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Health check
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     * Health check
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponse> {
        const response = await this.healthCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * Starts collectors on all targets, then starts requester
     * Start a new dashboard experiment
     */
    async startExperimentRaw(requestParameters: StartExperimentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        if (requestParameters['startExperimentRequest'] == null) {
            throw new runtime.RequiredError(
                'startExperimentRequest',
                'Required parameter "startExperimentRequest" was null or undefined when calling startExperiment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/experiments`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartExperimentRequestToJSON(requestParameters['startExperimentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Starts collectors on all targets, then starts requester
     * Start a new dashboard experiment
     */
    async startExperiment(requestParameters: StartExperimentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.startExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop the running experiment and cleanup sub-experiments
     */
    async stopExperimentRaw(requestParameters: StopExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        if (requestParameters['experimentId'] == null) {
            throw new runtime.RequiredError(
                'experimentId',
                'Required parameter "experimentId" was null or undefined when calling stopExperiment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiments/{experimentId}/stop`;
        urlPath = urlPath.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters['experimentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Stop the running experiment and cleanup sub-experiments
     */
    async stopExperiment(requestParameters: StopExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.stopExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
