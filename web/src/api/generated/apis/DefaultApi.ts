/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ExperimentData,
  ExperimentGroupDetail,
  ExperimentGroupListResponse,
  ExperimentGroupResponse,
  ExperimentListResponse,
  ExperimentResponse,
  HealthResponse,
  HostsStatusResponse,
  ServiceConfig,
  StartExperimentGroupRequest,
  StartExperimentRequest,
  StatusResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExperimentDataFromJSON,
    ExperimentDataToJSON,
    ExperimentGroupDetailFromJSON,
    ExperimentGroupDetailToJSON,
    ExperimentGroupListResponseFromJSON,
    ExperimentGroupListResponseToJSON,
    ExperimentGroupResponseFromJSON,
    ExperimentGroupResponseToJSON,
    ExperimentListResponseFromJSON,
    ExperimentListResponseToJSON,
    ExperimentResponseFromJSON,
    ExperimentResponseToJSON,
    HealthResponseFromJSON,
    HealthResponseToJSON,
    HostsStatusResponseFromJSON,
    HostsStatusResponseToJSON,
    ServiceConfigFromJSON,
    ServiceConfigToJSON,
    StartExperimentGroupRequestFromJSON,
    StartExperimentGroupRequestToJSON,
    StartExperimentRequestFromJSON,
    StartExperimentRequestToJSON,
    StatusResponseFromJSON,
    StatusResponseToJSON,
} from '../models/index';

export interface GetExperimentDataRequest {
    experimentId: string;
}

export interface GetExperimentGroupWithDetailsRequest {
    groupId: string;
}

export interface ListExperimentsRequest {
    page?: number;
    pageSize?: number;
    sortBy?: ListExperimentsSortByEnum;
    sortOrder?: ListExperimentsSortOrderEnum;
}

export interface ResumeExperimentGroupRequest {
    groupId: string;
}

export interface StartExperimentOperationRequest {
    startExperimentRequest: StartExperimentRequest;
}

export interface StartExperimentGroupOperationRequest {
    startExperimentGroupRequest: StartExperimentGroupRequest;
}

export interface StopExperimentRequest {
    experimentId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get experiment data
     */
    async getExperimentDataRaw(requestParameters: GetExperimentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentData>> {
        if (requestParameters['experimentId'] == null) {
            throw new runtime.RequiredError(
                'experimentId',
                'Required parameter "experimentId" was null or undefined when calling getExperimentData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiments/{experimentId}`;
        urlPath = urlPath.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters['experimentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentDataFromJSON(jsonValue));
    }

    /**
     * Get experiment data
     */
    async getExperimentData(requestParameters: GetExperimentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentData> {
        const response = await this.getExperimentDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns experiment group metadata and all associated experiment data
     * Get experiment group with all experiment details
     */
    async getExperimentGroupWithDetailsRaw(requestParameters: GetExperimentGroupWithDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentGroupDetail>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getExperimentGroupWithDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiment-groups/{groupId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentGroupDetailFromJSON(jsonValue));
    }

    /**
     * Returns experiment group metadata and all associated experiment data
     * Get experiment group with all experiment details
     */
    async getExperimentGroupWithDetails(requestParameters: GetExperimentGroupWithDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentGroupDetail> {
        const response = await this.getExperimentGroupWithDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query status of all target and client hosts
     * Get status of all hosts
     */
    async getHostsStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HostsStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/hosts/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostsStatusResponseFromJSON(jsonValue));
    }

    /**
     * Query status of all target and client hosts
     * Get status of all hosts
     */
    async getHostsStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HostsStatusResponse> {
        const response = await this.getHostsStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get service configuration
     */
    async getServiceConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConfigFromJSON(jsonValue));
    }

    /**
     * Get service configuration
     */
    async getServiceConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceConfig> {
        const response = await this.getServiceConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get experiment manager status
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
    }

    /**
     * Get experiment manager status
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.getStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Health check
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     * Health check
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponse> {
        const response = await this.healthCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all experiment groups with metadata
     * List all experiment groups
     */
    async listExperimentGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentGroupListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiment-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentGroupListResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all experiment groups with metadata
     * List all experiment groups
     */
    async listExperimentGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentGroupListResponse> {
        const response = await this.listExperimentGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of all experiments with metadata
     * List all stored experiments
     */
    async listExperimentsRaw(requestParameters: ListExperimentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiments`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentListResponseFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of all experiments with metadata
     * List all stored experiments
     */
    async listExperiments(requestParameters: ListExperimentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentListResponse> {
        const response = await this.listExperimentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resume a running or failed experiment group from where it left off
     * Resume an incomplete experiment group
     */
    async resumeExperimentGroupRaw(requestParameters: ResumeExperimentGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentGroupResponse>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling resumeExperimentGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiment-groups/{groupId}/resume`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentGroupResponseFromJSON(jsonValue));
    }

    /**
     * Resume a running or failed experiment group from where it left off
     * Resume an incomplete experiment group
     */
    async resumeExperimentGroup(requestParameters: ResumeExperimentGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentGroupResponse> {
        const response = await this.resumeExperimentGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Starts collectors on all targets, then starts requester
     * Start a new dashboard experiment
     */
    async startExperimentRaw(requestParameters: StartExperimentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        if (requestParameters['startExperimentRequest'] == null) {
            throw new runtime.RequiredError(
                'startExperimentRequest',
                'Required parameter "startExperimentRequest" was null or undefined when calling startExperiment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/experiments`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartExperimentRequestToJSON(requestParameters['startExperimentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Starts collectors on all targets, then starts requester
     * Start a new dashboard experiment
     */
    async startExperiment(requestParameters: StartExperimentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.startExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates and starts an experiment group with multiple repeated experiments
     * Start a new experiment group
     */
    async startExperimentGroupRaw(requestParameters: StartExperimentGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentGroupResponse>> {
        if (requestParameters['startExperimentGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'startExperimentGroupRequest',
                'Required parameter "startExperimentGroupRequest" was null or undefined when calling startExperimentGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/experiment-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartExperimentGroupRequestToJSON(requestParameters['startExperimentGroupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentGroupResponseFromJSON(jsonValue));
    }

    /**
     * Creates and starts an experiment group with multiple repeated experiments
     * Start a new experiment group
     */
    async startExperimentGroup(requestParameters: StartExperimentGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentGroupResponse> {
        const response = await this.startExperimentGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop the running experiment and cleanup sub-experiments
     */
    async stopExperimentRaw(requestParameters: StopExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        if (requestParameters['experimentId'] == null) {
            throw new runtime.RequiredError(
                'experimentId',
                'Required parameter "experimentId" was null or undefined when calling stopExperiment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/experiments/{experimentId}/stop`;
        urlPath = urlPath.replace(`{${"experimentId"}}`, encodeURIComponent(String(requestParameters['experimentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Stop the running experiment and cleanup sub-experiments
     */
    async stopExperiment(requestParameters: StopExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.stopExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListExperimentsSortByEnum = {
    CreatedAt: 'createdAt',
    ModifiedAt: 'modifiedAt',
    Id: 'id'
} as const;
export type ListExperimentsSortByEnum = typeof ListExperimentsSortByEnum[keyof typeof ListExperimentsSortByEnum];
/**
 * @export
 */
export const ListExperimentsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListExperimentsSortOrderEnum = typeof ListExperimentsSortOrderEnum[keyof typeof ListExperimentsSortOrderEnum];
