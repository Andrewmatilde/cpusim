/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Steady-state performance statistics with confidence intervals
 * @export
 * @interface SteadyStateStats
 */
export interface SteadyStateStats {
    /**
     * Mean CPU usage across all experiments (steady-state)
     * @type {number}
     * @memberof SteadyStateStats
     */
    cpuMean?: number;
    /**
     * Standard deviation of CPU usage
     * @type {number}
     * @memberof SteadyStateStats
     */
    cpuStdDev?: number;
    /**
     * Lower bound of 95% confidence interval
     * @type {number}
     * @memberof SteadyStateStats
     */
    cpuConfLower?: number;
    /**
     * Upper bound of 95% confidence interval
     * @type {number}
     * @memberof SteadyStateStats
     */
    cpuConfUpper?: number;
    /**
     * Minimum CPU value observed
     * @type {number}
     * @memberof SteadyStateStats
     */
    cpuMin?: number;
    /**
     * Maximum CPU value observed
     * @type {number}
     * @memberof SteadyStateStats
     */
    cpuMax?: number;
    /**
     * Number of experiments used in calculation
     * @type {number}
     * @memberof SteadyStateStats
     */
    sampleSize?: number;
    /**
     * Confidence level (e.g., 0.95 for 95%)
     * @type {number}
     * @memberof SteadyStateStats
     */
    confidenceLevel?: number;
}

/**
 * Check if a given object implements the SteadyStateStats interface.
 */
export function instanceOfSteadyStateStats(value: object): value is SteadyStateStats {
    return true;
}

export function SteadyStateStatsFromJSON(json: any): SteadyStateStats {
    return SteadyStateStatsFromJSONTyped(json, false);
}

export function SteadyStateStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SteadyStateStats {
    if (json == null) {
        return json;
    }
    return {
        
        'cpuMean': json['cpuMean'] == null ? undefined : json['cpuMean'],
        'cpuStdDev': json['cpuStdDev'] == null ? undefined : json['cpuStdDev'],
        'cpuConfLower': json['cpuConfLower'] == null ? undefined : json['cpuConfLower'],
        'cpuConfUpper': json['cpuConfUpper'] == null ? undefined : json['cpuConfUpper'],
        'cpuMin': json['cpuMin'] == null ? undefined : json['cpuMin'],
        'cpuMax': json['cpuMax'] == null ? undefined : json['cpuMax'],
        'sampleSize': json['sampleSize'] == null ? undefined : json['sampleSize'],
        'confidenceLevel': json['confidenceLevel'] == null ? undefined : json['confidenceLevel'],
    };
}

export function SteadyStateStatsToJSON(json: any): SteadyStateStats {
    return SteadyStateStatsToJSONTyped(json, false);
}

export function SteadyStateStatsToJSONTyped(value?: SteadyStateStats | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cpuMean': value['cpuMean'],
        'cpuStdDev': value['cpuStdDev'],
        'cpuConfLower': value['cpuConfLower'],
        'cpuConfUpper': value['cpuConfUpper'],
        'cpuMin': value['cpuMin'],
        'cpuMax': value['cpuMax'],
        'sampleSize': value['sampleSize'],
        'confidenceLevel': value['confidenceLevel'],
    };
}

