/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CPUStats } from './CPUStats';
import {
    CPUStatsFromJSON,
    CPUStatsFromJSONTyped,
    CPUStatsToJSON,
    CPUStatsToJSONTyped,
} from './CPUStats';
import type { LatencyStats } from './LatencyStats';
import {
    LatencyStatsFromJSON,
    LatencyStatsFromJSONTyped,
    LatencyStatsToJSON,
    LatencyStatsToJSONTyped,
} from './LatencyStats';

/**
 * Results for a specific QPS value
 * @export
 * @interface QPSPoint
 */
export interface QPSPoint {
    /**
     * QPS value for this point
     * @type {number}
     * @memberof QPSPoint
     */
    qps?: number;
    /**
     * List of experiment IDs for this QPS
     * @type {Array<string>}
     * @memberof QPSPoint
     */
    experiments?: Array<string>;
    /**
     * CPU statistics per host for this QPS
     * @type {{ [key: string]: CPUStats; }}
     * @memberof QPSPoint
     */
    statistics?: { [key: string]: CPUStats; };
    /**
     * 
     * @type {LatencyStats}
     * @memberof QPSPoint
     */
    latencyStats?: LatencyStats;
    /**
     * running, completed, failed
     * @type {string}
     * @memberof QPSPoint
     */
    status?: string;
}

/**
 * Check if a given object implements the QPSPoint interface.
 */
export function instanceOfQPSPoint(value: object): value is QPSPoint {
    return true;
}

export function QPSPointFromJSON(json: any): QPSPoint {
    return QPSPointFromJSONTyped(json, false);
}

export function QPSPointFromJSONTyped(json: any, ignoreDiscriminator: boolean): QPSPoint {
    if (json == null) {
        return json;
    }
    return {
        
        'qps': json['qps'] == null ? undefined : json['qps'],
        'experiments': json['experiments'] == null ? undefined : json['experiments'],
        'statistics': json['statistics'] == null ? undefined : (mapValues(json['statistics'], CPUStatsFromJSON)),
        'latencyStats': json['latencyStats'] == null ? undefined : LatencyStatsFromJSON(json['latencyStats']),
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function QPSPointToJSON(json: any): QPSPoint {
    return QPSPointToJSONTyped(json, false);
}

export function QPSPointToJSONTyped(value?: QPSPoint | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'qps': value['qps'],
        'experiments': value['experiments'],
        'statistics': value['statistics'] == null ? undefined : (mapValues(value['statistics'], CPUStatsToJSON)),
        'latencyStats': LatencyStatsToJSON(value['latencyStats']),
        'status': value['status'],
    };
}

