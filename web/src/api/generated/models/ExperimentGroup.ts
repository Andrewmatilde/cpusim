/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExperimentGroupConfig } from './ExperimentGroupConfig';
import {
    ExperimentGroupConfigFromJSON,
    ExperimentGroupConfigFromJSONTyped,
    ExperimentGroupConfigToJSON,
    ExperimentGroupConfigToJSONTyped,
} from './ExperimentGroupConfig';
import type { QPSPoint } from './QPSPoint';
import {
    QPSPointFromJSON,
    QPSPointFromJSONTyped,
    QPSPointToJSON,
    QPSPointToJSONTyped,
} from './QPSPoint';

/**
 * 
 * @export
 * @interface ExperimentGroup
 */
export interface ExperimentGroup {
    /**
     * Unique experiment group identifier
     * @type {string}
     * @memberof ExperimentGroup
     */
    groupId?: string;
    /**
     * Optional description
     * @type {string}
     * @memberof ExperimentGroup
     */
    description?: string;
    /**
     * 
     * @type {ExperimentGroupConfig}
     * @memberof ExperimentGroup
     */
    config?: ExperimentGroupConfig;
    /**
     * Results organized by QPS value
     * @type {Array<QPSPoint>}
     * @memberof ExperimentGroup
     */
    qpsPoints?: Array<QPSPoint>;
    /**
     * When the group started
     * @type {Date}
     * @memberof ExperimentGroup
     */
    startTime?: Date;
    /**
     * When the group completed
     * @type {Date}
     * @memberof ExperimentGroup
     */
    endTime?: Date;
    /**
     * running, completed, failed
     * @type {string}
     * @memberof ExperimentGroup
     */
    status?: string;
    /**
     * Current QPS value being tested
     * @type {number}
     * @memberof ExperimentGroup
     */
    currentQPS?: number;
    /**
     * Current run for current QPS (1-based)
     * @type {number}
     * @memberof ExperimentGroup
     */
    currentRun?: number;
}

/**
 * Check if a given object implements the ExperimentGroup interface.
 */
export function instanceOfExperimentGroup(value: object): value is ExperimentGroup {
    return true;
}

export function ExperimentGroupFromJSON(json: any): ExperimentGroup {
    return ExperimentGroupFromJSONTyped(json, false);
}

export function ExperimentGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperimentGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'groupId': json['groupId'] == null ? undefined : json['groupId'],
        'description': json['description'] == null ? undefined : json['description'],
        'config': json['config'] == null ? undefined : ExperimentGroupConfigFromJSON(json['config']),
        'qpsPoints': json['qpsPoints'] == null ? undefined : ((json['qpsPoints'] as Array<any>).map(QPSPointFromJSON)),
        'startTime': json['startTime'] == null ? undefined : (new Date(json['startTime'])),
        'endTime': json['endTime'] == null ? undefined : (new Date(json['endTime'])),
        'status': json['status'] == null ? undefined : json['status'],
        'currentQPS': json['currentQPS'] == null ? undefined : json['currentQPS'],
        'currentRun': json['currentRun'] == null ? undefined : json['currentRun'],
    };
}

export function ExperimentGroupToJSON(json: any): ExperimentGroup {
    return ExperimentGroupToJSONTyped(json, false);
}

export function ExperimentGroupToJSONTyped(value?: ExperimentGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'groupId': value['groupId'],
        'description': value['description'],
        'config': ExperimentGroupConfigToJSON(value['config']),
        'qpsPoints': value['qpsPoints'] == null ? undefined : ((value['qpsPoints'] as Array<any>).map(QPSPointToJSON)),
        'startTime': value['startTime'] == null ? undefined : ((value['startTime']).toISOString()),
        'endTime': value['endTime'] == null ? undefined : ((value['endTime']).toISOString()),
        'status': value['status'],
        'currentQPS': value['currentQPS'],
        'currentRun': value['currentRun'],
    };
}

