/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExperimentGroupConfig } from './ExperimentGroupConfig';
import {
    ExperimentGroupConfigFromJSON,
    ExperimentGroupConfigFromJSONTyped,
    ExperimentGroupConfigToJSON,
    ExperimentGroupConfigToJSONTyped,
} from './ExperimentGroupConfig';
import type { SteadyStateStats } from './SteadyStateStats';
import {
    SteadyStateStatsFromJSON,
    SteadyStateStatsFromJSONTyped,
    SteadyStateStatsToJSON,
    SteadyStateStatsToJSONTyped,
} from './SteadyStateStats';

/**
 * 
 * @export
 * @interface ExperimentGroup
 */
export interface ExperimentGroup {
    /**
     * Unique experiment group identifier
     * @type {string}
     * @memberof ExperimentGroup
     */
    groupId?: string;
    /**
     * Optional description
     * @type {string}
     * @memberof ExperimentGroup
     */
    description?: string;
    /**
     * 
     * @type {ExperimentGroupConfig}
     * @memberof ExperimentGroup
     */
    config?: ExperimentGroupConfig;
    /**
     * List of experiment IDs in this group
     * @type {Array<string>}
     * @memberof ExperimentGroup
     */
    experiments?: Array<string>;
    /**
     * When the group started
     * @type {Date}
     * @memberof ExperimentGroup
     */
    startTime?: Date;
    /**
     * When the group completed
     * @type {Date}
     * @memberof ExperimentGroup
     */
    endTime?: Date;
    /**
     * running, completed, failed
     * @type {string}
     * @memberof ExperimentGroup
     */
    status?: string;
    /**
     * Current execution number (1-based)
     * @type {number}
     * @memberof ExperimentGroup
     */
    currentRun?: number;
    /**
     * Steady-state statistics per host (calculated when group is completed)
     * @type {{ [key: string]: SteadyStateStats; }}
     * @memberof ExperimentGroup
     */
    statistics?: { [key: string]: SteadyStateStats; };
}

/**
 * Check if a given object implements the ExperimentGroup interface.
 */
export function instanceOfExperimentGroup(value: object): value is ExperimentGroup {
    return true;
}

export function ExperimentGroupFromJSON(json: any): ExperimentGroup {
    return ExperimentGroupFromJSONTyped(json, false);
}

export function ExperimentGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperimentGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'groupId': json['groupId'] == null ? undefined : json['groupId'],
        'description': json['description'] == null ? undefined : json['description'],
        'config': json['config'] == null ? undefined : ExperimentGroupConfigFromJSON(json['config']),
        'experiments': json['experiments'] == null ? undefined : json['experiments'],
        'startTime': json['startTime'] == null ? undefined : (new Date(json['startTime'])),
        'endTime': json['endTime'] == null ? undefined : (new Date(json['endTime'])),
        'status': json['status'] == null ? undefined : json['status'],
        'currentRun': json['currentRun'] == null ? undefined : json['currentRun'],
        'statistics': json['statistics'] == null ? undefined : (mapValues(json['statistics'], SteadyStateStatsFromJSON)),
    };
}

export function ExperimentGroupToJSON(json: any): ExperimentGroup {
    return ExperimentGroupToJSONTyped(json, false);
}

export function ExperimentGroupToJSONTyped(value?: ExperimentGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'groupId': value['groupId'],
        'description': value['description'],
        'config': ExperimentGroupConfigToJSON(value['config']),
        'experiments': value['experiments'],
        'startTime': value['startTime'] == null ? undefined : ((value['startTime']).toISOString()),
        'endTime': value['endTime'] == null ? undefined : ((value['endTime']).toISOString()),
        'status': value['status'],
        'currentRun': value['currentRun'],
        'statistics': value['statistics'] == null ? undefined : (mapValues(value['statistics'], SteadyStateStatsToJSON)),
    };
}

