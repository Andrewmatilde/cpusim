/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExperimentError
 */
export interface ExperimentError {
    /**
     * 
     * @type {Date}
     * @memberof ExperimentError
     */
    timestamp?: Date;
    /**
     * collector_start, requester_start, stop, etc.
     * @type {string}
     * @memberof ExperimentError
     */
    phase?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentError
     */
    hostName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentError
     */
    message?: string;
}

/**
 * Check if a given object implements the ExperimentError interface.
 */
export function instanceOfExperimentError(value: object): value is ExperimentError {
    return true;
}

export function ExperimentErrorFromJSON(json: any): ExperimentError {
    return ExperimentErrorFromJSONTyped(json, false);
}

export function ExperimentErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperimentError {
    if (json == null) {
        return json;
    }
    return {
        
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'phase': json['phase'] == null ? undefined : json['phase'],
        'hostName': json['hostName'] == null ? undefined : json['hostName'],
        'message': json['message'] == null ? undefined : json['message'],
    };
}

export function ExperimentErrorToJSON(json: any): ExperimentError {
    return ExperimentErrorToJSONTyped(json, false);
}

export function ExperimentErrorToJSONTyped(value?: ExperimentError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
        'phase': value['phase'],
        'hostName': value['hostName'],
        'message': value['message'],
    };
}

