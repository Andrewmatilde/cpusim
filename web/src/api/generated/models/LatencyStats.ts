/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * Dashboard service for coordinating distributed CPU simulation experiments
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Global latency statistics from client-side measurements
 * @export
 * @interface LatencyStats
 */
export interface LatencyStats {
    /**
     * Median latency in milliseconds
     * @type {number}
     * @memberof LatencyStats
     */
    latencyP50?: number;
    /**
     * 90th percentile latency in milliseconds
     * @type {number}
     * @memberof LatencyStats
     */
    latencyP90?: number;
    /**
     * 95th percentile latency in milliseconds
     * @type {number}
     * @memberof LatencyStats
     */
    latencyP95?: number;
    /**
     * 99th percentile latency in milliseconds
     * @type {number}
     * @memberof LatencyStats
     */
    latencyP99?: number;
    /**
     * Mean latency in milliseconds
     * @type {number}
     * @memberof LatencyStats
     */
    latencyMean?: number;
    /**
     * Minimum latency in milliseconds
     * @type {number}
     * @memberof LatencyStats
     */
    latencyMin?: number;
    /**
     * Maximum latency in milliseconds
     * @type {number}
     * @memberof LatencyStats
     */
    latencyMax?: number;
    /**
     * Successful requests per second
     * @type {number}
     * @memberof LatencyStats
     */
    throughput?: number;
    /**
     * Error rate percentage
     * @type {number}
     * @memberof LatencyStats
     */
    errorRate?: number;
    /**
     * Server utilization (lambda/mu)
     * @type {number}
     * @memberof LatencyStats
     */
    utilization?: number;
    /**
     * Number of experiments used in calculation
     * @type {number}
     * @memberof LatencyStats
     */
    sampleSize?: number;
}

/**
 * Check if a given object implements the LatencyStats interface.
 */
export function instanceOfLatencyStats(value: object): value is LatencyStats {
    return true;
}

export function LatencyStatsFromJSON(json: any): LatencyStats {
    return LatencyStatsFromJSONTyped(json, false);
}

export function LatencyStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LatencyStats {
    if (json == null) {
        return json;
    }
    return {
        
        'latencyP50': json['latencyP50'] == null ? undefined : json['latencyP50'],
        'latencyP90': json['latencyP90'] == null ? undefined : json['latencyP90'],
        'latencyP95': json['latencyP95'] == null ? undefined : json['latencyP95'],
        'latencyP99': json['latencyP99'] == null ? undefined : json['latencyP99'],
        'latencyMean': json['latencyMean'] == null ? undefined : json['latencyMean'],
        'latencyMin': json['latencyMin'] == null ? undefined : json['latencyMin'],
        'latencyMax': json['latencyMax'] == null ? undefined : json['latencyMax'],
        'throughput': json['throughput'] == null ? undefined : json['throughput'],
        'errorRate': json['errorRate'] == null ? undefined : json['errorRate'],
        'utilization': json['utilization'] == null ? undefined : json['utilization'],
        'sampleSize': json['sampleSize'] == null ? undefined : json['sampleSize'],
    };
}

export function LatencyStatsToJSON(json: any): LatencyStats {
    return LatencyStatsToJSONTyped(json, false);
}

export function LatencyStatsToJSONTyped(value?: LatencyStats | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'latencyP50': value['latencyP50'],
        'latencyP90': value['latencyP90'],
        'latencyP95': value['latencyP95'],
        'latencyP99': value['latencyP99'],
        'latencyMean': value['latencyMean'],
        'latencyMin': value['latencyMin'],
        'latencyMax': value['latencyMax'],
        'throughput': value['throughput'],
        'errorRate': value['errorRate'],
        'utilization': value['utilization'],
        'sampleSize': value['sampleSize'],
    };
}

