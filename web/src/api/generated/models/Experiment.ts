/* tslint:disable */
/* eslint-disable */
/**
 * CPU Simulation Dashboard API
 * 管理面API，用于管理多个CPU仿真主机和全局实验
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RequestConfig } from './RequestConfig';
import {
    RequestConfigFromJSON,
    RequestConfigFromJSONTyped,
    RequestConfigToJSON,
    RequestConfigToJSONTyped,
} from './RequestConfig';
import type { ExperimentPhases } from './ExperimentPhases';
import {
    ExperimentPhasesFromJSON,
    ExperimentPhasesFromJSONTyped,
    ExperimentPhasesToJSON,
    ExperimentPhasesToJSONTyped,
} from './ExperimentPhases';
import type { HostConfig } from './HostConfig';
import {
    HostConfigFromJSON,
    HostConfigFromJSONTyped,
    HostConfigToJSON,
    HostConfigToJSONTyped,
} from './HostConfig';

/**
 * 
 * @export
 * @interface Experiment
 */
export interface Experiment {
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    experimentId: string;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof Experiment
     */
    createdAt: Date;
    /**
     * 
     * @type {number}
     * @memberof Experiment
     */
    timeout?: number;
    /**
     * 
     * @type {number}
     * @memberof Experiment
     */
    collectionInterval?: number;
    /**
     * 目标主机列表
     * @type {Array<HostConfig>}
     * @memberof Experiment
     */
    targetHosts: Array<HostConfig>;
    /**
     * 
     * @type {HostConfig}
     * @memberof Experiment
     */
    clientHost: HostConfig;
    /**
     * 
     * @type {RequestConfig}
     * @memberof Experiment
     */
    requestConfig: RequestConfig;
    /**
     * 实验状态
     * @type {string}
     * @memberof Experiment
     */
    status?: ExperimentStatusEnum;
    /**
     * 
     * @type {ExperimentPhases}
     * @memberof Experiment
     */
    phases?: ExperimentPhases;
}


/**
 * @export
 */
export const ExperimentStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Stopping: 'stopping',
    Completed: 'completed',
    Failed: 'failed'
} as const;
export type ExperimentStatusEnum = typeof ExperimentStatusEnum[keyof typeof ExperimentStatusEnum];


/**
 * Check if a given object implements the Experiment interface.
 */
export function instanceOfExperiment(value: object): value is Experiment {
    if (!('experimentId' in value) || value['experimentId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('targetHosts' in value) || value['targetHosts'] === undefined) return false;
    if (!('clientHost' in value) || value['clientHost'] === undefined) return false;
    if (!('requestConfig' in value) || value['requestConfig'] === undefined) return false;
    return true;
}

export function ExperimentFromJSON(json: any): Experiment {
    return ExperimentFromJSONTyped(json, false);
}

export function ExperimentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Experiment {
    if (json == null) {
        return json;
    }
    return {
        
        'experimentId': json['experimentId'],
        'description': json['description'] == null ? undefined : json['description'],
        'createdAt': (new Date(json['createdAt'])),
        'timeout': json['timeout'] == null ? undefined : json['timeout'],
        'collectionInterval': json['collectionInterval'] == null ? undefined : json['collectionInterval'],
        'targetHosts': ((json['targetHosts'] as Array<any>).map(HostConfigFromJSON)),
        'clientHost': HostConfigFromJSON(json['clientHost']),
        'requestConfig': RequestConfigFromJSON(json['requestConfig']),
        'status': json['status'] == null ? undefined : json['status'],
        'phases': json['phases'] == null ? undefined : ExperimentPhasesFromJSON(json['phases']),
    };
}

export function ExperimentToJSON(json: any): Experiment {
    return ExperimentToJSONTyped(json, false);
}

export function ExperimentToJSONTyped(value?: Experiment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'experimentId': value['experimentId'],
        'description': value['description'],
        'createdAt': ((value['createdAt']).toISOString()),
        'timeout': value['timeout'],
        'collectionInterval': value['collectionInterval'],
        'targetHosts': ((value['targetHosts'] as Array<any>).map(HostConfigToJSON)),
        'clientHost': HostConfigToJSON(value['clientHost']),
        'requestConfig': RequestConfigToJSON(value['requestConfig']),
        'status': value['status'],
        'phases': ExperimentPhasesToJSON(value['phases']),
    };
}

