// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for StopAndCollectResponseStatus.
const (
	Failed  StopAndCollectResponseStatus = "failed"
	Partial StopAndCollectResponseStatus = "partial"
	Success StopAndCollectResponseStatus = "success"
)

// CalculationRequest defines model for CalculationRequest.
type CalculationRequest struct {
	A *int `json:"a,omitempty"`
	B *int `json:"b,omitempty"`
}

// CalculationResponse defines model for CalculationResponse.
type CalculationResponse struct {
	Gcd         *string `json:"gcd,omitempty"`
	ProcessTime *string `json:"process_time,omitempty"`
}

// CollectorExperimentData 与collector API的ExperimentData格式完全一致
type CollectorExperimentData struct {
	// CollectionInterval 数据收集间隔(毫秒)
	CollectionInterval *int    `json:"collectionInterval,omitempty"`
	Description        *string `json:"description,omitempty"`

	// Duration 实验时长(秒)
	Duration     *int               `json:"duration,omitempty"`
	EndTime      *time.Time         `json:"endTime,omitempty"`
	ExperimentId *string            `json:"experimentId,omitempty"`
	Metrics      *[]MetricDataPoint `json:"metrics,omitempty"`
	StartTime    *time.Time         `json:"startTime,omitempty"`
}

// CreateExperimentRequest defines model for CreateExperimentRequest.
type CreateExperimentRequest struct {
	// CollectionInterval 数据收集间隔(毫秒)
	CollectionInterval *int `json:"collectionInterval,omitempty"`

	// Description 实验描述
	Description *string `json:"description,omitempty"`

	// ExperimentId 实验唯一标识
	ExperimentId       string `json:"experimentId"`
	ParticipatingHosts []struct {
		// Ip 主机IP地址
		Ip string `json:"ip"`

		// Name 主机名
		Name string `json:"name"`
	} `json:"participatingHosts"`

	// Timeout 超时时间(秒)
	Timeout *int `json:"timeout,omitempty"`
}

// Experiment defines model for Experiment.
type Experiment struct {
	CollectionInterval *int      `json:"collectionInterval,omitempty"`
	CreatedAt          time.Time `json:"createdAt"`
	Description        *string   `json:"description,omitempty"`
	ExperimentId       string    `json:"experimentId"`
	ParticipatingHosts []struct {
		Ip   string `json:"ip"`
		Name string `json:"name"`
	} `json:"participatingHosts"`
	Timeout *int `json:"timeout,omitempty"`
}

// ExperimentDataResponse defines model for ExperimentDataResponse.
type ExperimentDataResponse struct {
	Experiment   *Experiment `json:"experiment,omitempty"`
	ExperimentId string      `json:"experimentId"`

	// Hosts 实验数据信息存储在data目录下experimentId目录下的data.json文件中，以hosts json列表形式存储
	Hosts *[]struct {
		// Data 与collector API的ExperimentData格式完全一致
		Data *CollectorExperimentData `json:"data,omitempty"`

		// Ip 主机IP
		Ip string `json:"ip"`

		// Name 主机名
		Name string `json:"name"`
	} `json:"hosts,omitempty"`
}

// ExperimentListResponse defines model for ExperimentListResponse.
type ExperimentListResponse struct {
	Experiments []Experiment `json:"experiments"`
	HasMore     *bool        `json:"hasMore,omitempty"`
	Total       int          `json:"total"`
}

// Host defines model for Host.
type Host struct {
	CollectorServiceUrl *string `json:"collectorServiceUrl,omitempty"`
	CpuServiceUrl       *string `json:"cpuServiceUrl,omitempty"`
	Ip                  *string `json:"ip,omitempty"`
	Name                *string `json:"name,omitempty"`
}

// HostHealth defines model for HostHealth.
type HostHealth struct {
	CollectorServiceHealthy *bool      `json:"collectorServiceHealthy,omitempty"`
	CpuServiceHealthy       *bool      `json:"cpuServiceHealthy,omitempty"`
	Ip                      *string    `json:"ip,omitempty"`
	Name                    *string    `json:"name,omitempty"`
	Timestamp               *time.Time `json:"timestamp,omitempty"`
}

// MetricDataPoint defines model for MetricDataPoint.
type MetricDataPoint struct {
	SystemMetrics struct {
		CalculatorServiceHealthy bool    `json:"calculatorServiceHealthy"`
		CpuUsagePercent          float32 `json:"cpuUsagePercent"`
		MemoryUsageBytes         int64   `json:"memoryUsageBytes"`
		MemoryUsagePercent       float32 `json:"memoryUsagePercent"`
		NetworkIOBytes           struct {
			BytesReceived   int64 `json:"bytesReceived"`
			BytesSent       int64 `json:"bytesSent"`
			PacketsReceived int64 `json:"packetsReceived"`
			PacketsSent     int64 `json:"packetsSent"`
		} `json:"networkIOBytes"`
	} `json:"systemMetrics"`
	Timestamp time.Time `json:"timestamp"`
}

// StopAndCollectResponse defines model for StopAndCollectResponse.
type StopAndCollectResponse struct {
	ExperimentId string `json:"experimentId"`

	// HostsCollected 成功收集数据的主机列表
	HostsCollected *[]struct {
		Ip   *string `json:"ip,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"hostsCollected,omitempty"`

	// HostsFailed 收集失败的主机列表
	HostsFailed *[]struct {
		// Error 失败原因
		Error *string `json:"error,omitempty"`
		Ip    *string `json:"ip,omitempty"`
		Name  *string `json:"name,omitempty"`
	} `json:"hostsFailed,omitempty"`
	Message *string `json:"message,omitempty"`

	// Status 停止和收集的总体状态
	Status    StopAndCollectResponseStatus `json:"status"`
	Timestamp time.Time                    `json:"timestamp"`
}

// StopAndCollectResponseStatus 停止和收集的总体状态
type StopAndCollectResponseStatus string

// GetExperimentsParams defines parameters for GetExperiments.
type GetExperimentsParams struct {
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetExperimentDataParams defines parameters for GetExperimentData.
type GetExperimentDataParams struct {
	// HostName 指定主机名，不指定则返回所有主机数据概要
	HostName *string `form:"hostName,omitempty" json:"hostName,omitempty"`
}

// CreateGlobalExperimentJSONRequestBody defines body for CreateGlobalExperiment for application/json ContentType.
type CreateGlobalExperimentJSONRequestBody = CreateExperimentRequest

// TestHostCalculationJSONRequestBody defines body for TestHostCalculation for application/json ContentType.
type TestHostCalculationJSONRequestBody = CalculationRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetExperiments request
	GetExperiments(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGlobalExperimentWithBody request with any body
	CreateGlobalExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGlobalExperiment(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalExperiment request
	GetGlobalExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentData request
	GetExperimentData(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopGlobalExperiment request
	StopGlobalExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHosts request
	GetHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHostCalculationWithBody request with any body
	TestHostCalculationWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestHostCalculation(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostHealth request
	GetHostHealth(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetExperiments(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGlobalExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGlobalExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGlobalExperiment(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGlobalExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentData(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentDataRequest(c.Server, experimentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopGlobalExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopGlobalExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHostCalculationWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHostCalculationRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHostCalculation(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHostCalculationRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostHealth(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostHealthRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetExperimentsRequest generates requests for GetExperiments
func NewGetExperimentsRequest(server string, params *GetExperimentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGlobalExperimentRequest calls the generic CreateGlobalExperiment builder with application/json body
func NewCreateGlobalExperimentRequest(server string, body CreateGlobalExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGlobalExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGlobalExperimentRequestWithBody generates requests for CreateGlobalExperiment with any type of body
func NewCreateGlobalExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGlobalExperimentRequest generates requests for GetGlobalExperiment
func NewGetGlobalExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExperimentDataRequest generates requests for GetExperimentData
func NewGetExperimentDataRequest(server string, experimentId string, params *GetExperimentDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s/data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.HostName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostName", runtime.ParamLocationQuery, *params.HostName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopGlobalExperimentRequest generates requests for StopGlobalExperiment
func NewStopGlobalExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostsRequest generates requests for GetHosts
func NewGetHostsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHostCalculationRequest calls the generic TestHostCalculation builder with application/json body
func NewTestHostCalculationRequest(server string, name string, body TestHostCalculationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestHostCalculationRequestWithBody(server, name, "application/json", bodyReader)
}

// NewTestHostCalculationRequestWithBody generates requests for TestHostCalculation with any type of body
func NewTestHostCalculationRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/calculate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHostHealthRequest generates requests for GetHostHealth
func NewGetHostHealthRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetExperimentsWithResponse request
	GetExperimentsWithResponse(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*GetExperimentsResponse, error)

	// CreateGlobalExperimentWithBodyWithResponse request with any body
	CreateGlobalExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error)

	CreateGlobalExperimentWithResponse(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error)

	// GetGlobalExperimentWithResponse request
	GetGlobalExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetGlobalExperimentResponse, error)

	// GetExperimentDataWithResponse request
	GetExperimentDataWithResponse(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error)

	// StopGlobalExperimentWithResponse request
	StopGlobalExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopGlobalExperimentResponse, error)

	// GetHostsWithResponse request
	GetHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsResponse, error)

	// TestHostCalculationWithBodyWithResponse request with any body
	TestHostCalculationWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error)

	TestHostCalculationWithResponse(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error)

	// GetHostHealthWithResponse request
	GetHostHealthWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostHealthResponse, error)
}

type GetExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentListResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGlobalExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Experiment
}

// Status returns HTTPResponse.Status
func (r CreateGlobalExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGlobalExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Experiment
}

// Status returns HTTPResponse.Status
func (r GetGlobalExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentDataResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopGlobalExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StopAndCollectResponse
}

// Status returns HTTPResponse.Status
func (r StopGlobalExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopGlobalExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Hosts *[]Host `json:"hosts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHostCalculationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CalculationResponse
}

// Status returns HTTPResponse.Status
func (r TestHostCalculationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHostCalculationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostHealth
}

// Status returns HTTPResponse.Status
func (r GetHostHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetExperimentsWithResponse request returning *GetExperimentsResponse
func (c *ClientWithResponses) GetExperimentsWithResponse(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*GetExperimentsResponse, error) {
	rsp, err := c.GetExperiments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentsResponse(rsp)
}

// CreateGlobalExperimentWithBodyWithResponse request with arbitrary body returning *CreateGlobalExperimentResponse
func (c *ClientWithResponses) CreateGlobalExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error) {
	rsp, err := c.CreateGlobalExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGlobalExperimentResponse(rsp)
}

func (c *ClientWithResponses) CreateGlobalExperimentWithResponse(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error) {
	rsp, err := c.CreateGlobalExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGlobalExperimentResponse(rsp)
}

// GetGlobalExperimentWithResponse request returning *GetGlobalExperimentResponse
func (c *ClientWithResponses) GetGlobalExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetGlobalExperimentResponse, error) {
	rsp, err := c.GetGlobalExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalExperimentResponse(rsp)
}

// GetExperimentDataWithResponse request returning *GetExperimentDataResponse
func (c *ClientWithResponses) GetExperimentDataWithResponse(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error) {
	rsp, err := c.GetExperimentData(ctx, experimentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentDataResponse(rsp)
}

// StopGlobalExperimentWithResponse request returning *StopGlobalExperimentResponse
func (c *ClientWithResponses) StopGlobalExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopGlobalExperimentResponse, error) {
	rsp, err := c.StopGlobalExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopGlobalExperimentResponse(rsp)
}

// GetHostsWithResponse request returning *GetHostsResponse
func (c *ClientWithResponses) GetHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsResponse, error) {
	rsp, err := c.GetHosts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsResponse(rsp)
}

// TestHostCalculationWithBodyWithResponse request with arbitrary body returning *TestHostCalculationResponse
func (c *ClientWithResponses) TestHostCalculationWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error) {
	rsp, err := c.TestHostCalculationWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHostCalculationResponse(rsp)
}

func (c *ClientWithResponses) TestHostCalculationWithResponse(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error) {
	rsp, err := c.TestHostCalculation(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHostCalculationResponse(rsp)
}

// GetHostHealthWithResponse request returning *GetHostHealthResponse
func (c *ClientWithResponses) GetHostHealthWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostHealthResponse, error) {
	rsp, err := c.GetHostHealth(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostHealthResponse(rsp)
}

// ParseGetExperimentsResponse parses an HTTP response from a GetExperimentsWithResponse call
func ParseGetExperimentsResponse(rsp *http.Response) (*GetExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateGlobalExperimentResponse parses an HTTP response from a CreateGlobalExperimentWithResponse call
func ParseCreateGlobalExperimentResponse(rsp *http.Response) (*CreateGlobalExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGlobalExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetGlobalExperimentResponse parses an HTTP response from a GetGlobalExperimentWithResponse call
func ParseGetGlobalExperimentResponse(rsp *http.Response) (*GetGlobalExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExperimentDataResponse parses an HTTP response from a GetExperimentDataWithResponse call
func ParseGetExperimentDataResponse(rsp *http.Response) (*GetExperimentDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStopGlobalExperimentResponse parses an HTTP response from a StopGlobalExperimentWithResponse call
func ParseStopGlobalExperimentResponse(rsp *http.Response) (*StopGlobalExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopGlobalExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopAndCollectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostsResponse parses an HTTP response from a GetHostsWithResponse call
func ParseGetHostsResponse(rsp *http.Response) (*GetHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Hosts *[]Host `json:"hosts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestHostCalculationResponse parses an HTTP response from a TestHostCalculationWithResponse call
func ParseTestHostCalculationResponse(rsp *http.Response) (*TestHostCalculationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHostCalculationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CalculationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostHealthResponse parses an HTTP response from a GetHostHealthWithResponse call
func ParseGetHostHealthResponse(rsp *http.Response) (*GetHostHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostHealth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取实验列表
	// (GET /api/experiments)
	GetExperiments(c *gin.Context, params GetExperimentsParams)
	// 创建实验
	// (POST /api/experiments)
	CreateGlobalExperiment(c *gin.Context)
	// 获取全局实验详情
	// (GET /api/experiments/{experimentId})
	GetGlobalExperiment(c *gin.Context, experimentId string)
	// 获取实验数据
	// (GET /api/experiments/{experimentId}/data)
	GetExperimentData(c *gin.Context, experimentId string, params GetExperimentDataParams)
	// 停止全局实验并收集数据
	// (POST /api/experiments/{experimentId}/stop)
	StopGlobalExperiment(c *gin.Context, experimentId string)
	// 获取所有主机列表
	// (GET /api/hosts)
	GetHosts(c *gin.Context)
	// 测试主机CPU计算
	// (POST /api/hosts/{name}/calculate)
	TestHostCalculation(c *gin.Context, name string)
	// 检查主机健康状态
	// (GET /api/hosts/{name}/health)
	GetHostHealth(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetExperiments operation middleware
func (siw *ServerInterfaceWrapper) GetExperiments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExperimentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperiments(c, params)
}

// CreateGlobalExperiment operation middleware
func (siw *ServerInterfaceWrapper) CreateGlobalExperiment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGlobalExperiment(c)
}

// GetGlobalExperiment operation middleware
func (siw *ServerInterfaceWrapper) GetGlobalExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGlobalExperiment(c, experimentId)
}

// GetExperimentData operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentData(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExperimentDataParams

	// ------------- Optional query parameter "hostName" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostName", c.Request.URL.Query(), &params.HostName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperimentData(c, experimentId, params)
}

// StopGlobalExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopGlobalExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopGlobalExperiment(c, experimentId)
}

// GetHosts operation middleware
func (siw *ServerInterfaceWrapper) GetHosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHosts(c)
}

// TestHostCalculation operation middleware
func (siw *ServerInterfaceWrapper) TestHostCalculation(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TestHostCalculation(c, name)
}

// GetHostHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHostHealth(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostHealth(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/experiments", wrapper.GetExperiments)
	router.POST(options.BaseURL+"/api/experiments", wrapper.CreateGlobalExperiment)
	router.GET(options.BaseURL+"/api/experiments/:experimentId", wrapper.GetGlobalExperiment)
	router.GET(options.BaseURL+"/api/experiments/:experimentId/data", wrapper.GetExperimentData)
	router.POST(options.BaseURL+"/api/experiments/:experimentId/stop", wrapper.StopGlobalExperiment)
	router.GET(options.BaseURL+"/api/hosts", wrapper.GetHosts)
	router.POST(options.BaseURL+"/api/hosts/:name/calculate", wrapper.TestHostCalculation)
	router.GET(options.BaseURL+"/api/hosts/:name/health", wrapper.GetHostHealth)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
