// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "cpusim/collector/api/generated"
	externalRef1 "cpusim/requester/api/generated"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ClientHost defines model for ClientHost.
type ClientHost struct {
	ExternalIP          string `json:"externalIP,omitempty"`
	InternalIP          string `json:"internalIP,omitempty"`
	Name                string `json:"name,omitempty"`
	RequesterServiceURL string `json:"requesterServiceURL,omitempty"`
}

// ClientHostStatus defines model for ClientHostStatus.
type ClientHostStatus struct {
	// CurrentExperimentId Current experiment ID if running
	CurrentExperimentId string `json:"currentExperimentId,omitempty"`

	// Error Error message if failed to query
	Error string `json:"error,omitempty"`

	// Name Host name
	Name string `json:"name,omitempty"`

	// Status Service status (Pending, Running, or Error)
	Status string `json:"status,omitempty"`
}

// CollectorResult defines model for CollectorResult.
type CollectorResult struct {
	Data     externalRef0.ExperimentData `json:"data,omitempty"`
	Error    string                      `json:"error,omitempty"`
	HostName string                      `json:"hostName,omitempty"`

	// Status completed, failed, not_started
	Status string `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     string    `json:"error,omitempty"`
	Message   string    `json:"message,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// ExperimentData Complete dashboard experiment result
type ExperimentData struct {
	// CollectorResults Results from collector experiments, keyed by host name
	CollectorResults map[string]CollectorResult `json:"collectorResults,omitempty"`

	// Config Dashboard service configuration (only service URLs)
	Config ServiceConfig `json:"config,omitempty"`

	// Duration Duration in seconds
	Duration        float32           `json:"duration,omitempty"`
	EndTime         time.Time         `json:"endTime,omitempty"`
	Errors          []ExperimentError `json:"errors,omitempty"`
	RequesterResult RequesterResult   `json:"requesterResult,omitempty"`
	StartTime       time.Time         `json:"startTime,omitempty"`

	// Status Experiment status
	Status string `json:"status,omitempty"`
}

// ExperimentError defines model for ExperimentError.
type ExperimentError struct {
	HostName string `json:"hostName,omitempty"`
	Message  string `json:"message,omitempty"`

	// Phase collector_start, requester_start, stop, etc.
	Phase     string    `json:"phase,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// ExperimentGroup defines model for ExperimentGroup.
type ExperimentGroup struct {
	Config ExperimentGroupConfig `json:"config,omitempty"`

	// CurrentQPS Current QPS value being tested
	CurrentQPS int `json:"currentQPS,omitempty"`

	// CurrentRun Current run for current QPS (1-based)
	CurrentRun int `json:"currentRun,omitempty"`

	// Description Optional description
	Description string `json:"description,omitempty"`

	// EndTime When the group completed
	EndTime time.Time `json:"endTime,omitempty"`

	// GroupId Unique experiment group identifier
	GroupId string `json:"groupId,omitempty"`

	// QpsPoints Results organized by QPS value
	QpsPoints []QPSPoint `json:"qpsPoints,omitempty"`

	// StartTime When the group started
	StartTime time.Time `json:"startTime,omitempty"`

	// Status running, completed, failed
	Status string `json:"status,omitempty"`
}

// ExperimentGroupConfig defines model for ExperimentGroupConfig.
type ExperimentGroupConfig struct {
	// DelayBetween Delay between experiments in seconds
	DelayBetween int `json:"delayBetween,omitempty"`

	// QpsMax Maximum QPS value (e.g., 500)
	QpsMax int `json:"qpsMax,omitempty"`

	// QpsMin Minimum QPS value (e.g., 100)
	QpsMin int `json:"qpsMin,omitempty"`

	// QpsStep Step size for QPS values (e.g., 100)
	QpsStep int `json:"qpsStep,omitempty"`

	// RepeatCount Number of times to repeat each QPS value
	RepeatCount int `json:"repeatCount,omitempty"`

	// Timeout Timeout for each experiment in seconds
	Timeout int `json:"timeout,omitempty"`
}

// ExperimentGroupDetail defines model for ExperimentGroupDetail.
type ExperimentGroupDetail struct {
	// ExperimentDetails Full data for all experiments in the group
	ExperimentDetails []ExperimentData `json:"experimentDetails,omitempty"`
	Group             ExperimentGroup  `json:"group,omitempty"`
}

// ExperimentGroupListResponse defines model for ExperimentGroupListResponse.
type ExperimentGroupListResponse struct {
	// Groups List of experiment groups
	Groups    []ExperimentGroup `json:"groups,omitempty"`
	Timestamp time.Time         `json:"timestamp,omitempty"`

	// Total Total number of groups
	Total int `json:"total,omitempty"`
}

// ExperimentGroupResponse defines model for ExperimentGroupResponse.
type ExperimentGroupResponse struct {
	GroupId string `json:"groupId,omitempty"`
	Message string `json:"message,omitempty"`

	// Status Response status
	Status    string    `json:"status,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// ExperimentInfo Metadata about a stored experiment
type ExperimentInfo struct {
	// CreatedAt When the experiment was created
	CreatedAt time.Time `json:"createdAt,omitempty"`

	// FileSizeKB Size of the experiment data file in KB
	FileSizeKB int64 `json:"fileSizeKB,omitempty"`

	// Id Experiment ID
	Id string `json:"id,omitempty"`

	// ModifiedAt When the experiment was last modified
	ModifiedAt time.Time `json:"modifiedAt,omitempty"`
}

// ExperimentListResponse defines model for ExperimentListResponse.
type ExperimentListResponse struct {
	// Experiments List of stored experiments
	Experiments []ExperimentInfo `json:"experiments,omitempty"`
	Timestamp   time.Time        `json:"timestamp,omitempty"`

	// Total Total number of experiments
	Total int `json:"total,omitempty"`
}

// ExperimentResponse defines model for ExperimentResponse.
type ExperimentResponse struct {
	ExperimentId string `json:"experimentId,omitempty"`
	Message      string `json:"message,omitempty"`

	// Status Response status
	Status    string    `json:"status,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    string    `json:"status,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`

	// Uptime Service uptime in seconds
	Uptime int `json:"uptime,omitempty"`
}

// HostsStatusResponse defines model for HostsStatusResponse.
type HostsStatusResponse struct {
	ClientHostStatus ClientHostStatus `json:"clientHostStatus,omitempty"`

	// TargetHostsStatus Status of target hosts (collectors)
	TargetHostsStatus []TargetHostStatus `json:"targetHostsStatus,omitempty"`
	Timestamp         time.Time          `json:"timestamp,omitempty"`
}

// QPSPoint Results for a specific QPS value
type QPSPoint struct {
	// Experiments List of experiment IDs for this QPS
	Experiments []string `json:"experiments,omitempty"`

	// Qps QPS value for this point
	Qps int `json:"qps,omitempty"`

	// Statistics Steady-state statistics per host for this QPS
	Statistics map[string]SteadyStateStats `json:"statistics,omitempty"`

	// Status running, completed, failed
	Status string `json:"status,omitempty"`
}

// RequesterResult defines model for RequesterResult.
type RequesterResult struct {
	Error string                              `json:"error,omitempty"`
	Stats externalRef1.RequestExperimentStats `json:"stats,omitempty"`

	// Status completed, failed, not_started
	Status string `json:"status,omitempty"`
}

// ServiceConfig Dashboard service configuration (only service URLs)
type ServiceConfig struct {
	ClientHost ClientHost `json:"clientHost,omitempty"`

	// TargetHosts List of target hosts to collect metrics from
	TargetHosts []TargetHost `json:"targetHosts,omitempty"`
}

// StartExperimentGroupRequest defines model for StartExperimentGroupRequest.
type StartExperimentGroupRequest struct {
	// DelayBetween Delay between experiments in seconds
	DelayBetween int `json:"delayBetween,omitempty"`

	// Description Optional description of the experiment group
	Description string `json:"description,omitempty"`

	// GroupId Unique experiment group identifier
	GroupId string `json:"groupId"`

	// QpsMax Maximum QPS value (e.g., 500)
	QpsMax int `json:"qpsMax"`

	// QpsMin Minimum QPS value (e.g., 100)
	QpsMin int `json:"qpsMin"`

	// QpsStep Step size for QPS values (e.g., 100)
	QpsStep int `json:"qpsStep"`

	// RepeatCount Number of times to repeat each QPS value
	RepeatCount int `json:"repeatCount"`

	// Timeout Timeout for each experiment in seconds
	Timeout int `json:"timeout"`
}

// StartExperimentRequest defines model for StartExperimentRequest.
type StartExperimentRequest struct {
	// ExperimentId Unique experiment identifier
	ExperimentId string `json:"experimentId"`

	// Qps Requests per second for the experiment
	Qps int `json:"qps"`

	// Timeout Experiment timeout in seconds
	Timeout int `json:"timeout"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	// Status Current experiment manager status (Pending or Running)
	Status    string    `json:"status,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// SteadyStateStats Steady-state performance statistics with confidence intervals
type SteadyStateStats struct {
	// ConfidenceLevel Confidence level (e.g., 0.95 for 95%)
	ConfidenceLevel float32 `json:"confidenceLevel,omitempty"`

	// CpuConfLower Lower bound of 95% confidence interval
	CpuConfLower float32 `json:"cpuConfLower,omitempty"`

	// CpuConfUpper Upper bound of 95% confidence interval
	CpuConfUpper float32 `json:"cpuConfUpper,omitempty"`

	// CpuMax Maximum CPU value observed
	CpuMax float32 `json:"cpuMax,omitempty"`

	// CpuMean Mean CPU usage across all experiments (steady-state)
	CpuMean float32 `json:"cpuMean,omitempty"`

	// CpuMin Minimum CPU value observed
	CpuMin float32 `json:"cpuMin,omitempty"`

	// CpuStdDev Standard deviation of CPU usage
	CpuStdDev float32 `json:"cpuStdDev,omitempty"`

	// SampleSize Number of experiments used in calculation
	SampleSize int `json:"sampleSize,omitempty"`
}

// TargetHost defines model for TargetHost.
type TargetHost struct {
	CollectorServiceURL string `json:"collectorServiceURL,omitempty"`
	CpuServiceURL       string `json:"cpuServiceURL,omitempty"`
	ExternalIP          string `json:"externalIP,omitempty"`
	InternalIP          string `json:"internalIP,omitempty"`
	Name                string `json:"name,omitempty"`
}

// TargetHostStatus defines model for TargetHostStatus.
type TargetHostStatus struct {
	// CurrentExperimentId Current experiment ID if running
	CurrentExperimentId string `json:"currentExperimentId,omitempty"`

	// Error Error message if failed to query
	Error string `json:"error,omitempty"`

	// Name Host name
	Name string `json:"name,omitempty"`

	// Status Service status (Pending, Running, or Error)
	Status string `json:"status,omitempty"`
}

// StartExperimentGroupJSONRequestBody defines body for StartExperimentGroup for application/json ContentType.
type StartExperimentGroupJSONRequestBody = StartExperimentGroupRequest

// StartExperimentJSONRequestBody defines body for StartExperiment for application/json ContentType.
type StartExperimentJSONRequestBody = StartExperimentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetServiceConfig request
	GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperimentGroups request
	ListExperimentGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartExperimentGroupWithBody request with any body
	StartExperimentGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartExperimentGroup(ctx context.Context, body StartExperimentGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentGroupWithDetails request
	GetExperimentGroupWithDetails(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeExperimentGroup request
	ResumeExperimentGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperiments request
	ListExperiments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartExperimentWithBody request with any body
	StartExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartExperiment(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentData request
	GetExperimentData(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopExperiment request
	StopExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostsStatus request
	GetHostsStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperimentGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperimentGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperimentGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperimentGroup(ctx context.Context, body StartExperimentGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentGroupWithDetails(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentGroupWithDetailsRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeExperimentGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeExperimentGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperiments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperimentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperiment(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentData(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentDataRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostsStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetServiceConfigRequest generates requests for GetServiceConfig
func NewGetServiceConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExperimentGroupsRequest generates requests for ListExperimentGroups
func NewListExperimentGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiment-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartExperimentGroupRequest calls the generic StartExperimentGroup builder with application/json body
func NewStartExperimentGroupRequest(server string, body StartExperimentGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartExperimentGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewStartExperimentGroupRequestWithBody generates requests for StartExperimentGroup with any type of body
func NewStartExperimentGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiment-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExperimentGroupWithDetailsRequest generates requests for GetExperimentGroupWithDetails
func NewGetExperimentGroupWithDetailsRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiment-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResumeExperimentGroupRequest generates requests for ResumeExperimentGroup
func NewResumeExperimentGroupRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiment-groups/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExperimentsRequest generates requests for ListExperiments
func NewListExperimentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartExperimentRequest calls the generic StartExperiment builder with application/json body
func NewStartExperimentRequest(server string, body StartExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewStartExperimentRequestWithBody generates requests for StartExperiment with any type of body
func NewStartExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExperimentDataRequest generates requests for GetExperimentData
func NewGetExperimentDataRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopExperimentRequest generates requests for StopExperiment
func NewStopExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostsStatusRequest generates requests for GetHostsStatus
func NewGetHostsStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetServiceConfigWithResponse request
	GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error)

	// ListExperimentGroupsWithResponse request
	ListExperimentGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListExperimentGroupsResponse, error)

	// StartExperimentGroupWithBodyWithResponse request with any body
	StartExperimentGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentGroupResponse, error)

	StartExperimentGroupWithResponse(ctx context.Context, body StartExperimentGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentGroupResponse, error)

	// GetExperimentGroupWithDetailsWithResponse request
	GetExperimentGroupWithDetailsWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetExperimentGroupWithDetailsResponse, error)

	// ResumeExperimentGroupWithResponse request
	ResumeExperimentGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*ResumeExperimentGroupResponse, error)

	// ListExperimentsWithResponse request
	ListExperimentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListExperimentsResponse, error)

	// StartExperimentWithBodyWithResponse request with any body
	StartExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error)

	StartExperimentWithResponse(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error)

	// GetExperimentDataWithResponse request
	GetExperimentDataWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error)

	// StopExperimentWithResponse request
	StopExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopExperimentResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)

	// GetHostsStatusWithResponse request
	GetHostsStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsStatusResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)
}

type GetServiceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceConfig
}

// Status returns HTTPResponse.Status
func (r GetServiceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperimentGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentGroupListResponse
}

// Status returns HTTPResponse.Status
func (r ListExperimentGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperimentGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartExperimentGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentGroupResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartExperimentGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartExperimentGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentGroupWithDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentGroupDetail
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentGroupWithDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentGroupWithDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeExperimentGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentGroupResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ResumeExperimentGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeExperimentGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentListResponse
}

// Status returns HTTPResponse.Status
func (r ListExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentData
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StopExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostsStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetHostsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponse
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetServiceConfigWithResponse request returning *GetServiceConfigResponse
func (c *ClientWithResponses) GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error) {
	rsp, err := c.GetServiceConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceConfigResponse(rsp)
}

// ListExperimentGroupsWithResponse request returning *ListExperimentGroupsResponse
func (c *ClientWithResponses) ListExperimentGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListExperimentGroupsResponse, error) {
	rsp, err := c.ListExperimentGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperimentGroupsResponse(rsp)
}

// StartExperimentGroupWithBodyWithResponse request with arbitrary body returning *StartExperimentGroupResponse
func (c *ClientWithResponses) StartExperimentGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentGroupResponse, error) {
	rsp, err := c.StartExperimentGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentGroupResponse(rsp)
}

func (c *ClientWithResponses) StartExperimentGroupWithResponse(ctx context.Context, body StartExperimentGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentGroupResponse, error) {
	rsp, err := c.StartExperimentGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentGroupResponse(rsp)
}

// GetExperimentGroupWithDetailsWithResponse request returning *GetExperimentGroupWithDetailsResponse
func (c *ClientWithResponses) GetExperimentGroupWithDetailsWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetExperimentGroupWithDetailsResponse, error) {
	rsp, err := c.GetExperimentGroupWithDetails(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentGroupWithDetailsResponse(rsp)
}

// ResumeExperimentGroupWithResponse request returning *ResumeExperimentGroupResponse
func (c *ClientWithResponses) ResumeExperimentGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*ResumeExperimentGroupResponse, error) {
	rsp, err := c.ResumeExperimentGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeExperimentGroupResponse(rsp)
}

// ListExperimentsWithResponse request returning *ListExperimentsResponse
func (c *ClientWithResponses) ListExperimentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListExperimentsResponse, error) {
	rsp, err := c.ListExperiments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperimentsResponse(rsp)
}

// StartExperimentWithBodyWithResponse request with arbitrary body returning *StartExperimentResponse
func (c *ClientWithResponses) StartExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error) {
	rsp, err := c.StartExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentResponse(rsp)
}

func (c *ClientWithResponses) StartExperimentWithResponse(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error) {
	rsp, err := c.StartExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentResponse(rsp)
}

// GetExperimentDataWithResponse request returning *GetExperimentDataResponse
func (c *ClientWithResponses) GetExperimentDataWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error) {
	rsp, err := c.GetExperimentData(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentDataResponse(rsp)
}

// StopExperimentWithResponse request returning *StopExperimentResponse
func (c *ClientWithResponses) StopExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopExperimentResponse, error) {
	rsp, err := c.StopExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopExperimentResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// GetHostsStatusWithResponse request returning *GetHostsStatusResponse
func (c *ClientWithResponses) GetHostsStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsStatusResponse, error) {
	rsp, err := c.GetHostsStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsStatusResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// ParseGetServiceConfigResponse parses an HTTP response from a GetServiceConfigWithResponse call
func ParseGetServiceConfigResponse(rsp *http.Response) (*GetServiceConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListExperimentGroupsResponse parses an HTTP response from a ListExperimentGroupsWithResponse call
func ParseListExperimentGroupsResponse(rsp *http.Response) (*ListExperimentGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExperimentGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentGroupListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartExperimentGroupResponse parses an HTTP response from a StartExperimentGroupWithResponse call
func ParseStartExperimentGroupResponse(rsp *http.Response) (*StartExperimentGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartExperimentGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetExperimentGroupWithDetailsResponse parses an HTTP response from a GetExperimentGroupWithDetailsWithResponse call
func ParseGetExperimentGroupWithDetailsResponse(rsp *http.Response) (*GetExperimentGroupWithDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentGroupWithDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentGroupDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseResumeExperimentGroupResponse parses an HTTP response from a ResumeExperimentGroupWithResponse call
func ParseResumeExperimentGroupResponse(rsp *http.Response) (*ResumeExperimentGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumeExperimentGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListExperimentsResponse parses an HTTP response from a ListExperimentsWithResponse call
func ParseListExperimentsResponse(rsp *http.Response) (*ListExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartExperimentResponse parses an HTTP response from a StartExperimentWithResponse call
func ParseStartExperimentResponse(rsp *http.Response) (*StartExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetExperimentDataResponse parses an HTTP response from a GetExperimentDataWithResponse call
func ParseGetExperimentDataResponse(rsp *http.Response) (*GetExperimentDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStopExperimentResponse parses an HTTP response from a StopExperimentWithResponse call
func ParseStopExperimentResponse(rsp *http.Response) (*StopExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostsStatusResponse parses an HTTP response from a GetHostsStatusWithResponse call
func ParseGetHostsStatusResponse(rsp *http.Response) (*GetHostsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostsStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get service configuration
	// (GET /config)
	GetServiceConfig(c *gin.Context)
	// List all experiment groups
	// (GET /experiment-groups)
	ListExperimentGroups(c *gin.Context)
	// Start a new experiment group
	// (POST /experiment-groups)
	StartExperimentGroup(c *gin.Context)
	// Get experiment group with all experiment details
	// (GET /experiment-groups/{groupId})
	GetExperimentGroupWithDetails(c *gin.Context, groupId string)
	// Resume an incomplete experiment group
	// (POST /experiment-groups/{groupId}/resume)
	ResumeExperimentGroup(c *gin.Context, groupId string)
	// List all stored experiments
	// (GET /experiments)
	ListExperiments(c *gin.Context)
	// Start a new dashboard experiment
	// (POST /experiments)
	StartExperiment(c *gin.Context)
	// Get experiment data
	// (GET /experiments/{experimentId})
	GetExperimentData(c *gin.Context, experimentId string)
	// Stop the running experiment and cleanup sub-experiments
	// (POST /experiments/{experimentId}/stop)
	StopExperiment(c *gin.Context, experimentId string)
	// Health check
	// (GET /health)
	HealthCheck(c *gin.Context)
	// Get status of all hosts
	// (GET /hosts/status)
	GetHostsStatus(c *gin.Context)
	// Get experiment manager status
	// (GET /status)
	GetStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetServiceConfig operation middleware
func (siw *ServerInterfaceWrapper) GetServiceConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceConfig(c)
}

// ListExperimentGroups operation middleware
func (siw *ServerInterfaceWrapper) ListExperimentGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListExperimentGroups(c)
}

// StartExperimentGroup operation middleware
func (siw *ServerInterfaceWrapper) StartExperimentGroup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartExperimentGroup(c)
}

// GetExperimentGroupWithDetails operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentGroupWithDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperimentGroupWithDetails(c, groupId)
}

// ResumeExperimentGroup operation middleware
func (siw *ServerInterfaceWrapper) ResumeExperimentGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Param("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResumeExperimentGroup(c, groupId)
}

// ListExperiments operation middleware
func (siw *ServerInterfaceWrapper) ListExperiments(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListExperiments(c)
}

// StartExperiment operation middleware
func (siw *ServerInterfaceWrapper) StartExperiment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartExperiment(c)
}

// GetExperimentData operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentData(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperimentData(c, experimentId)
}

// StopExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopExperiment(c, experimentId)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GetHostsStatus operation middleware
func (siw *ServerInterfaceWrapper) GetHostsStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostsStatus(c)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/config", wrapper.GetServiceConfig)
	router.GET(options.BaseURL+"/experiment-groups", wrapper.ListExperimentGroups)
	router.POST(options.BaseURL+"/experiment-groups", wrapper.StartExperimentGroup)
	router.GET(options.BaseURL+"/experiment-groups/:groupId", wrapper.GetExperimentGroupWithDetails)
	router.POST(options.BaseURL+"/experiment-groups/:groupId/resume", wrapper.ResumeExperimentGroup)
	router.GET(options.BaseURL+"/experiments", wrapper.ListExperiments)
	router.POST(options.BaseURL+"/experiments", wrapper.StartExperiment)
	router.GET(options.BaseURL+"/experiments/:experimentId", wrapper.GetExperimentData)
	router.POST(options.BaseURL+"/experiments/:experimentId/stop", wrapper.StopExperiment)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
	router.GET(options.BaseURL+"/hosts/status", wrapper.GetHostsStatus)
	router.GET(options.BaseURL+"/status", wrapper.GetStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcW28kxfX/KqX+g2T/NbZnWYzkeYnYS8DCu8x6sHhYOaim+8xMsd1VvVXVtmdXlpY8",
	"wIZwE5AglBBeiFZKlCwoiChhk08Te+GJrxBVVd+7uqfHHhsQeUnW09XnVufyq1Onueu4LAgZBSqF07vr",
	"CHcCAdb/vOwToPJ5JqT6K+QsBC4J6GdwIIFT7G/21V9yGoLTc4TkhI6dw45DaONjigOwPuBwOwIhgQ+A",
	"7xEXdra3LOsOO8kvbPgquFK9mQk7kFhGoiqyG3EOVF49CIGTAKjc9NTPHgiXk1ASRp2ec9ksQpCuQptX",
	"EBkhHlGqmHeqQgPnjFdJXVU/owCEwGNQJEaY+OAhydDtCPjURioxTJGS0grpR5ZXRKpu8aXYgsg8R0t9",
	"oB6h4w7aNpp0EONIy7hcJWu1MPN9cCXj2yAi3+ITHpZY/f8THEZOz/m/tcyz1mK3WnMTIq9k+3BFvZe3",
	"Y0XHCRPyep3P1BlAcfdBgteJLd9BlMlXhMRcgtdOZ22fbRAhowIsUVArcbzt1meSBCAkDkL1dMR4gKXT",
	"U9aDFfWopWRF81UdOdYeeVhMhgxzL+/T3GxhpxwixS3Wv2HPI4om9vuFtU27XHaVw05Jupg+GnEWoJRr",
	"TkLRQbdgCh4aTtGk6v6ZHVxGR2Q8S6A4GC6bxUqciGMjS9lwV+IniFAkwGXUExlfGgVD4NpZqfcSMR7Z",
	"Zgtj79aWIxKCmSbM9lf7oJP5AOYcTwvJMgvIJorbpeUmdLicT426aMvkjTPOvG58NYmloks2hn5TlIUT",
	"LMCWFZIEpJXvoNSKyQ9CsrCDQLqrNv0XHLzPcRaFllrVyqtLZDLvjkvdjf6gvsLd6A/QHvYjQEMgdIyk",
	"MkIuLaoSPja+HpPbjmg9OR5RNGIcuTnySxdWhliAt2ylWqBTJvtiaHIOyv9si6osDIsEXp4ARXICaKxM",
	"g9Ji4HRaOrp+zwYRdii5HUE+mxoWxAMqyYgAt5G7HYo+IzHIsidDxseYkjsm6aXb43TaJYwb/YFmYMsU",
	"hThvtFNWHU+XDngCMipV+EQRcjmNhxLkAB9PL4HcB7ClcvUUDc3jfHGx5vaca94OxTV8UCV4DR+QIApy",
	"sbMEq+PVDlrvdpdrKRGLaNcItVO60EBpICG0AD0JIRLkDuj4SwmKmRQ5hIDlZRZRWaV6XVc6xEZIZzyF",
	"Ws16BNidFNyzSlm9wiIL1ZfMAy2pppOLosY9aeEjV0Bi4tuOKilS0iss3vrzyPeRgq9aMOz7ZWdJA6Rt",
	"NFbRbTkmx0nmnyPDt7LDFhGyHrJqthYTqLfUbpfTmphf41jUqspz186OI5nEvsWP1M+Ipj6ainoCv5lh",
	"K1MC5oIedUkx4VSLkBYOLzbpiFmSD0isvR0PVTBiBXk45A8I1ZMBByzBe1Y2VJCc6+xjgeJXWpeSEfFh",
	"QO7AC5csOU6lN5WLimxMyBIfVIy+cCnPilD5zNPW5ES8RvS6ecUmXMA8VdrnMoCPhUTJiy3N0LydzaGd",
	"y1n18V3Z6hMEuPaqc43vorjzBXkbg/0Ig/x5wL6c1CuXyXd6/h0nCqUVPiZdJvN8/hr+PBNSmI5dvSqu",
	"pbfX2H4or1ecMR+DzLGzASndKVNpRi/WjQeBltIjo1huGysvpdxyEpw2Wmz2S1F/7alCIxokQnDJiLgF",
	"4HaC9FHoixrickKEIpu3TdXlSsrftmGQDAyndEOtnC2NK/8mQhL3xF2qgQTsTdUGgfofUW1TmRUripWJ",
	"Z8MQhcBNV6qkf2V7zup4tF1t/bTtTAqt6gzTZE2RmFOWTlNTnWXftdivqx7s0p6miPOPaZgkrbslRv1p",
	"+mxne0tHbl1SaZ9OSomkPkwKCUSypMWJApBcOdCIs2D+XFINJKvtlKErGFfvYpsD9Ahrh+p2TnaYDswR",
	"2eldfKbb7TiBOedqegtoAVkwYHIsW3ADJ8AHW0DHcuL0nrmo9Uj+vNBxQiwlcEXrFzfxyp3uysbuUvyP",
	"ld3/T35a/tkTNZ2gEzUXUste6BYse2GRfYd5mZyqJTEXs0V1K/JMZ/E8fR+jLhwuWOGRSruEg+f0bqbu",
	"m+5l6jmZ4YtWyeTdnZ0WajMCNN6PVmPn/KLGhnG0EqYgG6PHJRmKh1k4wKooqU2f0+1qXSB3ZIzXLGrn",
	"CzuQSWBsULO1jfi5rlJbLrsDTPFYGbN4a4wYT+6Nl8/sRFPBY7a8kuGxELjmRN0CNtsncmLggAfqkR5F",
	"2MO+sNx2Jou2YA982x1qSsVXK5L01V3dWNd+trH+5LLtctANI/XuFtsHy2CA/hkNWUQ9lbE21p+0ydtA",
	"dycMbXT1zyel21iSLvd34mrBhgpV5WFckQpgW9EBTDWNSI9CYJczISpt1iWR2906szYWtdZiDqR3Bfas",
	"J0DqKVjpwR7BCeBIJbdREzqxDMgdaKpKeT0jAZ5KFS723cjHxZutxsNyDglabgzjQ2rj5IzRvnnFmYz2",
	"NKvzv5GdsxnZqZ22qXMfwuhmkics6TBZkyYT5ccB8X3SdJtWQvkVc5xwFiPHYf5hjJJHnR1uiU98rec+",
	"si27pt9U29XuXrdl2W1AGhm5TO7dRrcqy1iFHlMhIbiWGaGd7oPCaycEGHlNs/c7JZmaFbwOcp/xW5sv",
	"VlUbTiWIbXCBqEJT8d1L6jHi8fMcQrXdUjQfkzWnAdgOPoaLUEnvNBxC7N4C2aBN3yxYjD4xN7tGCadT",
	"6lTa/+Jm5U1aVb4oYLN/DMr+XUqrcY1Py7Lp2k+tl0hyAhxlb6T9K6LMrrC9V6hmQ8Z8BbdMUd9RJasP",
	"3LUaNQNfoVli0Exq0ZHPsKw/HHctwCeAgPGpZqud0Ab71IqYL6FI23x+b8kxqtWvwGphKtIk+FMF22Wv",
	"LGmU3bC8URYzWhWuyNKpdy2bw87s51Y8F+8Bx2NIDpX24aGjf/zt6JM3jj54++ifHx5/9NW3H3353aP7",
	"xw///PjB+989+pXN+hUb1xf/47dee/z1X1KyKc3G8l8k8fjrD44/+dSQqLuApZHv46EPTk/yCOqw4jaW",
	"FvrffvjxNw8fPn7nDSXfx/8+uv/68cMP22re3Gg5+usfvv3TW/bLaINKk+aH5d3Pvvjmyz9+8/Dvx1/8",
	"8vg3n1tt5mMhd0JP39BXTf/7e0fvvXP8uy+Pf/t5s/WqeAcfNPuMov3Zg1P5TEDobB6fv3sqHnHEiD7w",
	"gSlAVS4P33384P3UzN89un+jP2hPP1Ogv96tUl/vPnl0//X//OvtU6qRY7OxXmWzsb54NhsWNhuLYNMw",
	"x3j06N7Rg1/P6ax1BzETfI/f/Or43muOyi+qQtx0sgOlkCwMNVTID5aaU+WujVHkuiDEKPLro/b4/ntH",
	"b37aHLV6XKKBxL2vm96vHhEP9YHeNiNUvWLT072McY9QLAkdI48oBYeRBE/3SAQJ4n5GeV6DSJVfNQoZ",
	"ZIsyFs/2N52OswdcGOZPrXZXu0pfFgLFIXF6zsXV7upFDc3kRGu+ls1Ij0FDAlW+NGWVT53nQBZvETMv",
	"1e8/1e3GTUAZQwochj5xNYW1V4UpSaa4z/l5wWH1Itl2Tak3RERBgPnUCGy/ztTr1jKTrmQzfLHm5a64",
	"jDgVCCM/vo4sttriaTnTKQ3iWTCnU7LfFhHlW0RxljZsmmK0WLR+XrFoVb3Oqr8+icS9tBJa1pNrAmHq",
	"mYFo9c/qfaGxX+RLEvoQ3zdVRquKRrXdzTppsbnEvOnifLLhGviwiEsV8Dk8v61t2tarZSPHYwMoy6C+",
	"bn08vUj5Cl95WaS6hL3kOxHDe+P8eA+yU+AwEtOSe+tdRhhR2K9eitvzxtrd+GrxcGYGqbh8kE6OUk9H",
	"FRaCuaTk98iaUJ6Dsju+TOQkmclWmZ3jACRw4fRu3nWIEkRleyfpseauRIu+28nZ+hTNusPd84uBeFi9",
	"TQToNOPFZtLe9/T5eV9FGsokGrGIepbqZc+QpeSbajLDOdc4iMggPXuW3tbPEU76/IjxpF9fEUR/Z7g/",
	"AQ6ISOTDSNWOUcVFDclqfv5JueZc7mA26YeTntGSkQv7HLA3zebrlHekvrv8A8viiStTRGgi8cx0fnIA",
	"OB/0OyfUNz/gq4V6lhn3Wqw3MPgum/FFjGoiZoRPdJCcAE1gYNpHm4XszgfUfe94rmWu+MmDuJwtksyU",
	"NBPq8Zzty/1KEli7m+8jHjYdh0t3wG3KWumC8Mdc28x3eI1b48Wf6n1fCKsltjJiNvvBmpAszGOncrZi",
	"YSFZ/aRcoXXW0k0+S9b63t3jnNPXdVb4j4fUZC4W6sHLBI7n3lCnRdcHTNWBPhqulGv42kTfXdUmL3O1",
	"dXkC7q2zBCOlT6qaYdwkvm4rWsGQQK4W1ajGhGKRdpqtiO1GBHyazP3EeC3+hsDYjigzalK2c3X+s6az",
	"tI/lYy2bkQpqGKEtrc6aVVVTVfu6Z67pbCWTqbOmQdnGLF6ctDUs9NBinIKb2vEaf0bcd3rORMqwt7bm",
	"Mxf7yoi9je5G1zncPfxvAAAA///p2KxD2UsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./collector.openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "./requester.openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
