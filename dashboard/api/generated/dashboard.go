// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "cpusim/collector/api/generated"
	externalRef1 "cpusim/requester/api/generated"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ExperimentStatus.
const (
	ExperimentStatusCompleted ExperimentStatus = "completed"
	ExperimentStatusFailed    ExperimentStatus = "failed"
	ExperimentStatusPending   ExperimentStatus = "pending"
	ExperimentStatusRunning   ExperimentStatus = "running"
	ExperimentStatusStopping  ExperimentStatus = "stopping"
)

// Defines values for ExperimentOperationResponseStatus.
const (
	ExperimentOperationResponseStatusFailed  ExperimentOperationResponseStatus = "failed"
	ExperimentOperationResponseStatusPartial ExperimentOperationResponseStatus = "partial"
	ExperimentOperationResponseStatusSuccess ExperimentOperationResponseStatus = "success"
)

// Defines values for HostHostType.
const (
	HostHostTypeClient HostHostType = "client"
	HostHostTypeTarget HostHostType = "target"
)

// Defines values for HostHealthHostType.
const (
	HostHealthHostTypeClient HostHealthHostType = "client"
	HostHealthHostTypeTarget HostHealthHostType = "target"
)

// Defines values for PhaseStatusStatus.
const (
	PhaseStatusStatusCompleted PhaseStatusStatus = "completed"
	PhaseStatusStatusFailed    PhaseStatusStatus = "failed"
	PhaseStatusStatusPending   PhaseStatusStatus = "pending"
	PhaseStatusStatusRunning   PhaseStatusStatus = "running"
)

// Defines values for StopAndCollectResponseHostsCollectedHostType.
const (
	StopAndCollectResponseHostsCollectedHostTypeClient StopAndCollectResponseHostsCollectedHostType = "client"
	StopAndCollectResponseHostsCollectedHostTypeTarget StopAndCollectResponseHostsCollectedHostType = "target"
)

// Defines values for StopAndCollectResponseHostsFailedHostType.
const (
	StopAndCollectResponseHostsFailedHostTypeClient StopAndCollectResponseHostsFailedHostType = "client"
	StopAndCollectResponseHostsFailedHostTypeTarget StopAndCollectResponseHostsFailedHostType = "target"
)

// Defines values for StopAndCollectResponseStatus.
const (
	StopAndCollectResponseStatusFailed  StopAndCollectResponseStatus = "failed"
	StopAndCollectResponseStatusPartial StopAndCollectResponseStatus = "partial"
	StopAndCollectResponseStatusSuccess StopAndCollectResponseStatus = "success"
)

// CalculationRequest defines model for CalculationRequest.
type CalculationRequest struct {
	A int `json:"a,omitempty"`
	B int `json:"b,omitempty"`
}

// CalculationResponse defines model for CalculationResponse.
type CalculationResponse struct {
	Gcd         string `json:"gcd,omitempty"`
	ProcessTime string `json:"process_time,omitempty"`
}

// CollectorExperimentData defines model for CollectorExperimentData.
type CollectorExperimentData = externalRef0.ExperimentData

// CreateExperimentRequest defines model for CreateExperimentRequest.
type CreateExperimentRequest struct {
	ClientHost HostConfig `json:"clientHost"`

	// CollectionInterval 数据收集间隔(毫秒)
	CollectionInterval int `json:"collectionInterval,omitempty"`

	// Description 实验描述
	Description string `json:"description,omitempty"`

	// ExperimentId 实验唯一标识
	ExperimentId  string        `json:"experimentId"`
	RequestConfig RequestConfig `json:"requestConfig"`

	// TargetHosts 目标主机列表（运行cpusim-server和collector-server）
	TargetHosts []HostConfig `json:"targetHosts"`

	// Timeout 超时时间(秒)
	Timeout int `json:"timeout,omitempty"`
}

// Experiment defines model for Experiment.
type Experiment struct {
	ClientHost         HostConfig `json:"clientHost"`
	CollectionInterval int        `json:"collectionInterval,omitempty"`
	CreatedAt          time.Time  `json:"createdAt"`
	Description        string     `json:"description,omitempty"`
	ExperimentId       string     `json:"experimentId"`

	// Phases 实验各阶段执行状态
	Phases        ExperimentPhases `json:"phases,omitempty"`
	RequestConfig RequestConfig    `json:"requestConfig"`

	// Status 实验状态
	Status ExperimentStatus `json:"status,omitempty"`

	// TargetHosts 目标主机列表
	TargetHosts []HostConfig `json:"targetHosts"`
	Timeout     int          `json:"timeout,omitempty"`
}

// ExperimentStatus 实验状态
type ExperimentStatus string

// ExperimentDataResponse defines model for ExperimentDataResponse.
type ExperimentDataResponse struct {
	// ClientHost 客户端主机实验数据
	ClientHost struct {
		// ExternalIP 主机外网IP
		ExternalIP string `json:"externalIP"`

		// InternalIP 主机内网IP
		InternalIP string `json:"internalIP,omitempty"`

		// Name 主机名
		Name string `json:"name"`

		// RequesterData requester收集的数据（仅在查询特定主机时返回）
		RequesterData struct {
			Stats externalRef1.RequestExperimentStats `json:"stats,omitempty"`
		} `json:"requesterData,omitempty"`
	} `json:"clientHost,omitempty"`
	Experiment   Experiment `json:"experiment,omitempty"`
	ExperimentId string     `json:"experimentId"`

	// TargetHosts 目标主机实验数据
	TargetHosts []struct {
		CollectorData CollectorExperimentData `json:"collectorData,omitempty"`

		// ExternalIP 主机外网IP
		ExternalIP string `json:"externalIP"`

		// InternalIP 主机内网IP
		InternalIP string `json:"internalIP,omitempty"`

		// Name 主机名
		Name string `json:"name"`
	} `json:"targetHosts,omitempty"`
}

// ExperimentListResponse defines model for ExperimentListResponse.
type ExperimentListResponse struct {
	Experiments []Experiment `json:"experiments"`
	HasMore     bool         `json:"hasMore,omitempty"`
	Total       int          `json:"total"`
}

// ExperimentOperationResponse defines model for ExperimentOperationResponse.
type ExperimentOperationResponse struct {
	ExperimentId string `json:"experimentId"`
	Message      string `json:"message,omitempty"`

	// Phases 实验各阶段执行状态
	Phases ExperimentPhases `json:"phases,omitempty"`

	// Status 操作总体状态
	Status    ExperimentOperationResponseStatus `json:"status"`
	Timestamp time.Time                         `json:"timestamp"`
}

// ExperimentOperationResponseStatus 操作总体状态
type ExperimentOperationResponseStatus string

// ExperimentPhases 实验各阶段执行状态
type ExperimentPhases struct {
	CollectorStart PhaseStatus `json:"collectorStart,omitempty"`
	CollectorStop  PhaseStatus `json:"collectorStop,omitempty"`
	RequesterStart PhaseStatus `json:"requesterStart,omitempty"`
	RequesterStop  PhaseStatus `json:"requesterStop,omitempty"`
}

// Host defines model for Host.
type Host struct {
	CollectorServiceUrl string `json:"collectorServiceUrl,omitempty"`
	CpuServiceUrl       string `json:"cpuServiceUrl,omitempty"`

	// ExternalIP 外网IP
	ExternalIP string `json:"externalIP,omitempty"`

	// HostType 主机类型
	HostType HostHostType `json:"hostType,omitempty"`

	// InternalIP 内网IP（可选）
	InternalIP string `json:"internalIP,omitempty"`
	Name       string `json:"name,omitempty"`

	// RequesterServiceUrl 仅适用于client类型主机
	RequesterServiceUrl string `json:"requesterServiceUrl,omitempty"`
}

// HostHostType 主机类型
type HostHostType string

// HostConfig defines model for HostConfig.
type HostConfig struct {
	// CollectorServicePort 数据收集服务端口
	CollectorServicePort int `json:"collectorServicePort,omitempty"`

	// CpuServicePort CPU服务端口
	CpuServicePort int `json:"cpuServicePort,omitempty"`

	// ExternalIP 外网IP地址
	ExternalIP string `json:"externalIP"`

	// InternalIP 内网IP地址（用于内网通信）
	InternalIP string `json:"internalIP,omitempty"`

	// Name 主机名
	Name string `json:"name"`

	// RequesterServicePort 请求发送服务端口（仅适用于clientHosts）
	RequesterServicePort int `json:"requesterServicePort,omitempty"`
}

// HostHealth defines model for HostHealth.
type HostHealth struct {
	CollectorServiceHealthy bool               `json:"collectorServiceHealthy,omitempty"`
	CpuServiceHealthy       bool               `json:"cpuServiceHealthy,omitempty"`
	ExternalIP              string             `json:"externalIP,omitempty"`
	HostType                HostHealthHostType `json:"hostType,omitempty"`
	InternalIP              string             `json:"internalIP,omitempty"`
	Name                    string             `json:"name,omitempty"`

	// RequesterServiceHealthy 仅适用于client类型主机
	RequesterServiceHealthy bool      `json:"requesterServiceHealthy,omitempty"`
	Timestamp               time.Time `json:"timestamp,omitempty"`
}

// HostHealthHostType defines model for HostHealth.HostType.
type HostHealthHostType string

// PhaseStatus defines model for PhaseStatus.
type PhaseStatus struct {
	EndTime time.Time `json:"endTime,omitempty"`

	// Message 状态消息或错误信息
	Message   string            `json:"message,omitempty"`
	StartTime time.Time         `json:"startTime,omitempty"`
	Status    PhaseStatusStatus `json:"status,omitempty"`
}

// PhaseStatusStatus defines model for PhaseStatus.Status.
type PhaseStatusStatus string

// RequestConfig defines model for RequestConfig.
type RequestConfig struct {
	// Qps 每秒请求数
	Qps int `json:"qps"`

	// RequestBody 请求体（JSON）
	RequestBody map[string]interface{} `json:"requestBody,omitempty"`

	// RequestTimeout 单个请求超时时间（秒）
	RequestTimeout int `json:"requestTimeout"`

	// TargetEndpoint 目标服务端点
	TargetEndpoint string `json:"targetEndpoint,omitempty"`

	// TargetHostName 目标主机名（必须是targetHosts中的一个主机名）
	TargetHostName string `json:"targetHostName"`
}

// StopAndCollectResponse defines model for StopAndCollectResponse.
type StopAndCollectResponse struct {
	ExperimentId string `json:"experimentId"`

	// HostsCollected 成功收集数据的主机列表
	HostsCollected []struct {
		ExternalIP string                                       `json:"externalIP,omitempty"`
		HostType   StopAndCollectResponseHostsCollectedHostType `json:"hostType,omitempty"`
		Name       string                                       `json:"name,omitempty"`
	} `json:"hostsCollected,omitempty"`

	// HostsFailed 收集失败的主机列表
	HostsFailed []struct {
		// Error 失败原因
		Error      string                                    `json:"error,omitempty"`
		ExternalIP string                                    `json:"externalIP,omitempty"`
		HostType   StopAndCollectResponseHostsFailedHostType `json:"hostType,omitempty"`
		Name       string                                    `json:"name,omitempty"`
	} `json:"hostsFailed,omitempty"`
	Message string `json:"message,omitempty"`

	// Phases 实验各阶段执行状态
	Phases ExperimentPhases `json:"phases,omitempty"`

	// Status 停止和收集的总体状态
	Status    StopAndCollectResponseStatus `json:"status"`
	Timestamp time.Time                    `json:"timestamp"`
}

// StopAndCollectResponseHostsCollectedHostType defines model for StopAndCollectResponse.HostsCollected.HostType.
type StopAndCollectResponseHostsCollectedHostType string

// StopAndCollectResponseHostsFailedHostType defines model for StopAndCollectResponse.HostsFailed.HostType.
type StopAndCollectResponseHostsFailedHostType string

// StopAndCollectResponseStatus 停止和收集的总体状态
type StopAndCollectResponseStatus string

// GetExperimentsParams defines parameters for GetExperiments.
type GetExperimentsParams struct {
	Limit int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetExperimentDataParams defines parameters for GetExperimentData.
type GetExperimentDataParams struct {
	// HostName 指定主机名，不指定则返回所有主机数据概要
	HostName string `form:"hostName,omitempty" json:"hostName,omitempty"`
}

// CreateGlobalExperimentJSONRequestBody defines body for CreateGlobalExperiment for application/json ContentType.
type CreateGlobalExperimentJSONRequestBody = CreateExperimentRequest

// TestHostCalculationJSONRequestBody defines body for TestHostCalculation for application/json ContentType.
type TestHostCalculationJSONRequestBody = CalculationRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetExperiments request
	GetExperiments(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGlobalExperimentWithBody request with any body
	CreateGlobalExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGlobalExperiment(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalExperiment request
	GetGlobalExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentData request
	GetExperimentData(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentPhases request
	GetExperimentPhases(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartCompleteExperiment request
	StartCompleteExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopCompleteExperiment request
	StopCompleteExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHosts request
	GetHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHostCalculationWithBody request with any body
	TestHostCalculationWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestHostCalculation(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostHealth request
	GetHostHealth(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetExperiments(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGlobalExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGlobalExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGlobalExperiment(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGlobalExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentData(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentDataRequest(c.Server, experimentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentPhases(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentPhasesRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartCompleteExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartCompleteExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopCompleteExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopCompleteExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHostCalculationWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHostCalculationRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHostCalculation(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHostCalculationRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostHealth(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostHealthRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetExperimentsRequest generates requests for GetExperiments
func NewGetExperimentsRequest(server string, params *GetExperimentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGlobalExperimentRequest calls the generic CreateGlobalExperiment builder with application/json body
func NewCreateGlobalExperimentRequest(server string, body CreateGlobalExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGlobalExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGlobalExperimentRequestWithBody generates requests for CreateGlobalExperiment with any type of body
func NewCreateGlobalExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGlobalExperimentRequest generates requests for GetGlobalExperiment
func NewGetGlobalExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExperimentDataRequest generates requests for GetExperimentData
func NewGetExperimentDataRequest(server string, experimentId string, params *GetExperimentDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s/data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostName", runtime.ParamLocationQuery, params.HostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExperimentPhasesRequest generates requests for GetExperimentPhases
func NewGetExperimentPhasesRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s/phases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartCompleteExperimentRequest generates requests for StartCompleteExperiment
func NewStartCompleteExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopCompleteExperimentRequest generates requests for StopCompleteExperiment
func NewStopCompleteExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/experiments/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostsRequest generates requests for GetHosts
func NewGetHostsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHostCalculationRequest calls the generic TestHostCalculation builder with application/json body
func NewTestHostCalculationRequest(server string, name string, body TestHostCalculationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestHostCalculationRequestWithBody(server, name, "application/json", bodyReader)
}

// NewTestHostCalculationRequestWithBody generates requests for TestHostCalculation with any type of body
func NewTestHostCalculationRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/calculate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHostHealthRequest generates requests for GetHostHealth
func NewGetHostHealthRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetExperimentsWithResponse request
	GetExperimentsWithResponse(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*GetExperimentsResponse, error)

	// CreateGlobalExperimentWithBodyWithResponse request with any body
	CreateGlobalExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error)

	CreateGlobalExperimentWithResponse(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error)

	// GetGlobalExperimentWithResponse request
	GetGlobalExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetGlobalExperimentResponse, error)

	// GetExperimentDataWithResponse request
	GetExperimentDataWithResponse(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error)

	// GetExperimentPhasesWithResponse request
	GetExperimentPhasesWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentPhasesResponse, error)

	// StartCompleteExperimentWithResponse request
	StartCompleteExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StartCompleteExperimentResponse, error)

	// StopCompleteExperimentWithResponse request
	StopCompleteExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopCompleteExperimentResponse, error)

	// GetHostsWithResponse request
	GetHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsResponse, error)

	// TestHostCalculationWithBodyWithResponse request with any body
	TestHostCalculationWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error)

	TestHostCalculationWithResponse(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error)

	// GetHostHealthWithResponse request
	GetHostHealthWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostHealthResponse, error)
}

type GetExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentListResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGlobalExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Experiment
}

// Status returns HTTPResponse.Status
func (r CreateGlobalExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGlobalExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Experiment
}

// Status returns HTTPResponse.Status
func (r GetGlobalExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentDataResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentPhasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentPhases
}

// Status returns HTTPResponse.Status
func (r GetExperimentPhasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentPhasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartCompleteExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentOperationResponse
}

// Status returns HTTPResponse.Status
func (r StartCompleteExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartCompleteExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopCompleteExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StopAndCollectResponse
}

// Status returns HTTPResponse.Status
func (r StopCompleteExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopCompleteExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Hosts []Host `json:"hosts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHostCalculationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CalculationResponse
}

// Status returns HTTPResponse.Status
func (r TestHostCalculationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHostCalculationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostHealth
}

// Status returns HTTPResponse.Status
func (r GetHostHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetExperimentsWithResponse request returning *GetExperimentsResponse
func (c *ClientWithResponses) GetExperimentsWithResponse(ctx context.Context, params *GetExperimentsParams, reqEditors ...RequestEditorFn) (*GetExperimentsResponse, error) {
	rsp, err := c.GetExperiments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentsResponse(rsp)
}

// CreateGlobalExperimentWithBodyWithResponse request with arbitrary body returning *CreateGlobalExperimentResponse
func (c *ClientWithResponses) CreateGlobalExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error) {
	rsp, err := c.CreateGlobalExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGlobalExperimentResponse(rsp)
}

func (c *ClientWithResponses) CreateGlobalExperimentWithResponse(ctx context.Context, body CreateGlobalExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGlobalExperimentResponse, error) {
	rsp, err := c.CreateGlobalExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGlobalExperimentResponse(rsp)
}

// GetGlobalExperimentWithResponse request returning *GetGlobalExperimentResponse
func (c *ClientWithResponses) GetGlobalExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetGlobalExperimentResponse, error) {
	rsp, err := c.GetGlobalExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalExperimentResponse(rsp)
}

// GetExperimentDataWithResponse request returning *GetExperimentDataResponse
func (c *ClientWithResponses) GetExperimentDataWithResponse(ctx context.Context, experimentId string, params *GetExperimentDataParams, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error) {
	rsp, err := c.GetExperimentData(ctx, experimentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentDataResponse(rsp)
}

// GetExperimentPhasesWithResponse request returning *GetExperimentPhasesResponse
func (c *ClientWithResponses) GetExperimentPhasesWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentPhasesResponse, error) {
	rsp, err := c.GetExperimentPhases(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentPhasesResponse(rsp)
}

// StartCompleteExperimentWithResponse request returning *StartCompleteExperimentResponse
func (c *ClientWithResponses) StartCompleteExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StartCompleteExperimentResponse, error) {
	rsp, err := c.StartCompleteExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartCompleteExperimentResponse(rsp)
}

// StopCompleteExperimentWithResponse request returning *StopCompleteExperimentResponse
func (c *ClientWithResponses) StopCompleteExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopCompleteExperimentResponse, error) {
	rsp, err := c.StopCompleteExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopCompleteExperimentResponse(rsp)
}

// GetHostsWithResponse request returning *GetHostsResponse
func (c *ClientWithResponses) GetHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsResponse, error) {
	rsp, err := c.GetHosts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsResponse(rsp)
}

// TestHostCalculationWithBodyWithResponse request with arbitrary body returning *TestHostCalculationResponse
func (c *ClientWithResponses) TestHostCalculationWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error) {
	rsp, err := c.TestHostCalculationWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHostCalculationResponse(rsp)
}

func (c *ClientWithResponses) TestHostCalculationWithResponse(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error) {
	rsp, err := c.TestHostCalculation(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHostCalculationResponse(rsp)
}

// GetHostHealthWithResponse request returning *GetHostHealthResponse
func (c *ClientWithResponses) GetHostHealthWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostHealthResponse, error) {
	rsp, err := c.GetHostHealth(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostHealthResponse(rsp)
}

// ParseGetExperimentsResponse parses an HTTP response from a GetExperimentsWithResponse call
func ParseGetExperimentsResponse(rsp *http.Response) (*GetExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateGlobalExperimentResponse parses an HTTP response from a CreateGlobalExperimentWithResponse call
func ParseCreateGlobalExperimentResponse(rsp *http.Response) (*CreateGlobalExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGlobalExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetGlobalExperimentResponse parses an HTTP response from a GetGlobalExperimentWithResponse call
func ParseGetGlobalExperimentResponse(rsp *http.Response) (*GetGlobalExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExperimentDataResponse parses an HTTP response from a GetExperimentDataWithResponse call
func ParseGetExperimentDataResponse(rsp *http.Response) (*GetExperimentDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExperimentPhasesResponse parses an HTTP response from a GetExperimentPhasesWithResponse call
func ParseGetExperimentPhasesResponse(rsp *http.Response) (*GetExperimentPhasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentPhasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentPhases
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartCompleteExperimentResponse parses an HTTP response from a StartCompleteExperimentWithResponse call
func ParseStartCompleteExperimentResponse(rsp *http.Response) (*StartCompleteExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartCompleteExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentOperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStopCompleteExperimentResponse parses an HTTP response from a StopCompleteExperimentWithResponse call
func ParseStopCompleteExperimentResponse(rsp *http.Response) (*StopCompleteExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopCompleteExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopAndCollectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostsResponse parses an HTTP response from a GetHostsWithResponse call
func ParseGetHostsResponse(rsp *http.Response) (*GetHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Hosts []Host `json:"hosts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestHostCalculationResponse parses an HTTP response from a TestHostCalculationWithResponse call
func ParseTestHostCalculationResponse(rsp *http.Response) (*TestHostCalculationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHostCalculationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CalculationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostHealthResponse parses an HTTP response from a GetHostHealthWithResponse call
func ParseGetHostHealthResponse(rsp *http.Response) (*GetHostHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostHealth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取实验列表
	// (GET /api/experiments)
	GetExperiments(c *gin.Context, params GetExperimentsParams)
	// 创建实验
	// (POST /api/experiments)
	CreateGlobalExperiment(c *gin.Context)
	// 获取全局实验详情
	// (GET /api/experiments/{experimentId})
	GetGlobalExperiment(c *gin.Context, experimentId string)
	// 获取实验数据
	// (GET /api/experiments/{experimentId}/data)
	GetExperimentData(c *gin.Context, experimentId string, params GetExperimentDataParams)
	// 获取实验各阶段状态
	// (GET /api/experiments/{experimentId}/phases)
	GetExperimentPhases(c *gin.Context, experimentId string)
	// 启动完整实验流程
	// (POST /api/experiments/{experimentId}/start)
	StartCompleteExperiment(c *gin.Context, experimentId string)
	// 停止完整实验流程并收集数据
	// (POST /api/experiments/{experimentId}/stop)
	StopCompleteExperiment(c *gin.Context, experimentId string)
	// 获取所有主机列表
	// (GET /api/hosts)
	GetHosts(c *gin.Context)
	// 测试主机CPU计算
	// (POST /api/hosts/{name}/calculate)
	TestHostCalculation(c *gin.Context, name string)
	// 检查主机健康状态
	// (GET /api/hosts/{name}/health)
	GetHostHealth(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetExperiments operation middleware
func (siw *ServerInterfaceWrapper) GetExperiments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExperimentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperiments(c, params)
}

// CreateGlobalExperiment operation middleware
func (siw *ServerInterfaceWrapper) CreateGlobalExperiment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGlobalExperiment(c)
}

// GetGlobalExperiment operation middleware
func (siw *ServerInterfaceWrapper) GetGlobalExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGlobalExperiment(c, experimentId)
}

// GetExperimentData operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentData(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExperimentDataParams

	// ------------- Optional query parameter "hostName" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostName", c.Request.URL.Query(), &params.HostName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hostName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperimentData(c, experimentId, params)
}

// GetExperimentPhases operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentPhases(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperimentPhases(c, experimentId)
}

// StartCompleteExperiment operation middleware
func (siw *ServerInterfaceWrapper) StartCompleteExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartCompleteExperiment(c, experimentId)
}

// StopCompleteExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopCompleteExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopCompleteExperiment(c, experimentId)
}

// GetHosts operation middleware
func (siw *ServerInterfaceWrapper) GetHosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHosts(c)
}

// TestHostCalculation operation middleware
func (siw *ServerInterfaceWrapper) TestHostCalculation(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TestHostCalculation(c, name)
}

// GetHostHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHostHealth(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostHealth(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/experiments", wrapper.GetExperiments)
	router.POST(options.BaseURL+"/api/experiments", wrapper.CreateGlobalExperiment)
	router.GET(options.BaseURL+"/api/experiments/:experimentId", wrapper.GetGlobalExperiment)
	router.GET(options.BaseURL+"/api/experiments/:experimentId/data", wrapper.GetExperimentData)
	router.GET(options.BaseURL+"/api/experiments/:experimentId/phases", wrapper.GetExperimentPhases)
	router.POST(options.BaseURL+"/api/experiments/:experimentId/start", wrapper.StartCompleteExperiment)
	router.POST(options.BaseURL+"/api/experiments/:experimentId/stop", wrapper.StopCompleteExperiment)
	router.GET(options.BaseURL+"/api/hosts", wrapper.GetHosts)
	router.POST(options.BaseURL+"/api/hosts/:name/calculate", wrapper.TestHostCalculation)
	router.GET(options.BaseURL+"/api/hosts/:name/health", wrapper.GetHostHealth)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./collector.openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "./requester.openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
