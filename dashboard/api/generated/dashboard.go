// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "cpusim/collector/api/generated"
	externalRef1 "cpusim/requester/api/generated"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ClientHost defines model for ClientHost.
type ClientHost struct {
	ExternalIP          string `json:"externalIP,omitempty"`
	InternalIP          string `json:"internalIP,omitempty"`
	Name                string `json:"name,omitempty"`
	RequesterServiceURL string `json:"requesterServiceURL,omitempty"`
}

// CollectorResult defines model for CollectorResult.
type CollectorResult struct {
	DataPointsCollected int    `json:"dataPointsCollected,omitempty"`
	Error               string `json:"error,omitempty"`
	ExperimentId        string `json:"experimentId,omitempty"`
	HostName            string `json:"hostName,omitempty"`
	Status              string `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     string    `json:"error,omitempty"`
	Message   string    `json:"message,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// ExperimentData Complete dashboard experiment result
type ExperimentData struct {
	// CollectorResults Results from collector experiments, keyed by host name
	CollectorResults map[string]CollectorResult `json:"collectorResults,omitempty"`

	// Config Dashboard service configuration (only service URLs)
	Config ServiceConfig `json:"config,omitempty"`

	// Duration Duration in seconds
	Duration        float32           `json:"duration,omitempty"`
	EndTime         time.Time         `json:"endTime,omitempty"`
	Errors          []ExperimentError `json:"errors,omitempty"`
	RequesterResult RequesterResult   `json:"requesterResult,omitempty"`
	StartTime       time.Time         `json:"startTime,omitempty"`

	// Status Experiment status
	Status string `json:"status,omitempty"`
}

// ExperimentError defines model for ExperimentError.
type ExperimentError struct {
	HostName string `json:"hostName,omitempty"`
	Message  string `json:"message,omitempty"`

	// Phase collector_start, requester_start, stop, etc.
	Phase     string    `json:"phase,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// ExperimentResponse defines model for ExperimentResponse.
type ExperimentResponse struct {
	ExperimentId string `json:"experimentId,omitempty"`
	Message      string `json:"message,omitempty"`

	// Status Response status
	Status    string    `json:"status,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    string    `json:"status,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`

	// Uptime Service uptime in seconds
	Uptime int `json:"uptime,omitempty"`
}

// RequesterResult defines model for RequesterResult.
type RequesterResult struct {
	AvgResponseTime float64 `json:"avgResponseTime,omitempty"`
	Error           string  `json:"error,omitempty"`
	ExperimentId    string  `json:"experimentId,omitempty"`
	Failed          int64   `json:"failed,omitempty"`
	Status          string  `json:"status,omitempty"`
	Successful      int64   `json:"successful,omitempty"`
	TotalRequests   int64   `json:"totalRequests,omitempty"`
}

// ServiceConfig Dashboard service configuration (only service URLs)
type ServiceConfig struct {
	ClientHost ClientHost `json:"clientHost,omitempty"`

	// TargetHosts List of target hosts to collect metrics from
	TargetHosts []TargetHost `json:"targetHosts,omitempty"`
}

// StartExperimentRequest defines model for StartExperimentRequest.
type StartExperimentRequest struct {
	// ExperimentId Unique experiment identifier
	ExperimentId string `json:"experimentId"`

	// Timeout Experiment timeout in seconds
	Timeout int `json:"timeout"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	// Status Current experiment manager status (Pending or Running)
	Status    string    `json:"status,omitempty"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// TargetHost defines model for TargetHost.
type TargetHost struct {
	CollectorServiceURL string `json:"collectorServiceURL,omitempty"`
	CpuServiceURL       string `json:"cpuServiceURL,omitempty"`
	ExternalIP          string `json:"externalIP,omitempty"`
	InternalIP          string `json:"internalIP,omitempty"`
	Name                string `json:"name,omitempty"`
}

// StartExperimentJSONRequestBody defines body for StartExperiment for application/json ContentType.
type StartExperimentJSONRequestBody = StartExperimentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetServiceConfig request
	GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartExperimentWithBody request with any body
	StartExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartExperiment(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentData request
	GetExperimentData(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopExperiment request
	StopExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperiment(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentData(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentDataRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetServiceConfigRequest generates requests for GetServiceConfig
func NewGetServiceConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartExperimentRequest calls the generic StartExperiment builder with application/json body
func NewStartExperimentRequest(server string, body StartExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewStartExperimentRequestWithBody generates requests for StartExperiment with any type of body
func NewStartExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExperimentDataRequest generates requests for GetExperimentData
func NewGetExperimentDataRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopExperimentRequest generates requests for StopExperiment
func NewStopExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetServiceConfigWithResponse request
	GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error)

	// StartExperimentWithBodyWithResponse request with any body
	StartExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error)

	StartExperimentWithResponse(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error)

	// GetExperimentDataWithResponse request
	GetExperimentDataWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error)

	// StopExperimentWithResponse request
	StopExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopExperimentResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)
}

type GetServiceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceConfig
}

// Status returns HTTPResponse.Status
func (r GetServiceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentData
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StopExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponse
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetServiceConfigWithResponse request returning *GetServiceConfigResponse
func (c *ClientWithResponses) GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error) {
	rsp, err := c.GetServiceConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceConfigResponse(rsp)
}

// StartExperimentWithBodyWithResponse request with arbitrary body returning *StartExperimentResponse
func (c *ClientWithResponses) StartExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error) {
	rsp, err := c.StartExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentResponse(rsp)
}

func (c *ClientWithResponses) StartExperimentWithResponse(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error) {
	rsp, err := c.StartExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentResponse(rsp)
}

// GetExperimentDataWithResponse request returning *GetExperimentDataResponse
func (c *ClientWithResponses) GetExperimentDataWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error) {
	rsp, err := c.GetExperimentData(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentDataResponse(rsp)
}

// StopExperimentWithResponse request returning *StopExperimentResponse
func (c *ClientWithResponses) StopExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopExperimentResponse, error) {
	rsp, err := c.StopExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopExperimentResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// ParseGetServiceConfigResponse parses an HTTP response from a GetServiceConfigWithResponse call
func ParseGetServiceConfigResponse(rsp *http.Response) (*GetServiceConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartExperimentResponse parses an HTTP response from a StartExperimentWithResponse call
func ParseStartExperimentResponse(rsp *http.Response) (*StartExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetExperimentDataResponse parses an HTTP response from a GetExperimentDataWithResponse call
func ParseGetExperimentDataResponse(rsp *http.Response) (*GetExperimentDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStopExperimentResponse parses an HTTP response from a StopExperimentWithResponse call
func ParseStopExperimentResponse(rsp *http.Response) (*StopExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get service configuration
	// (GET /config)
	GetServiceConfig(c *gin.Context)
	// Start a new dashboard experiment
	// (POST /experiments)
	StartExperiment(c *gin.Context)
	// Get experiment data
	// (GET /experiments/{experimentId})
	GetExperimentData(c *gin.Context, experimentId string)
	// Stop the running experiment and cleanup sub-experiments
	// (POST /experiments/{experimentId}/stop)
	StopExperiment(c *gin.Context, experimentId string)
	// Health check
	// (GET /health)
	HealthCheck(c *gin.Context)
	// Get experiment manager status
	// (GET /status)
	GetStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetServiceConfig operation middleware
func (siw *ServerInterfaceWrapper) GetServiceConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceConfig(c)
}

// StartExperiment operation middleware
func (siw *ServerInterfaceWrapper) StartExperiment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartExperiment(c)
}

// GetExperimentData operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentData(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperimentData(c, experimentId)
}

// StopExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopExperiment(c, experimentId)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/config", wrapper.GetServiceConfig)
	router.POST(options.BaseURL+"/experiments", wrapper.StartExperiment)
	router.GET(options.BaseURL+"/experiments/:experimentId", wrapper.GetExperimentData)
	router.POST(options.BaseURL+"/experiments/:experimentId/stop", wrapper.StopExperiment)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
	router.GET(options.BaseURL+"/status", wrapper.GetStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX28TORD/KpaPBzhtm0ARUvNyOgo6kCoUBfqEeidnd5IYvLaxx1xzVb77yfb+j7MN",
	"XAsP95Zdz3r+/eY3M7mluSq1kiDR0tkttfkGShZ+XggOEt8oi/5JG6XBIIdwBjcIRjLxdu6fcKuBzqhF",
	"w+Wa7jLK5eixZCUkDwx8cWARzHswX3kOV4vLhNwuq9+o5SfI0X95oYSAHJVZgHUiYXHBkM0Vl2grUSg6",
	"V3uD12D8TWCMMknr4EaD4SVIfFskBTbK4rtDvllk6OyR7rz2RizAaiUtJMJ/0MYSrGXrtAXIS7DISu1P",
	"V8qUDOnMBwZO/BHNjrKsCcIrhixEFmxuuEauJJ3RC1VqAQikYHazVMwUpI0bMTE72cCfvJ+98I4VBfd3",
	"MjHvyT4ysKIz+sukBe6kQu1kiIJdNrCuup+sjCpJo7Vjoc3IZ9hCQZZb4tNJAlYTcciVXPH1XQZVOL6I",
	"wt4cZ1i0ZRi4V9UJ4ZJYyJUsbKtXunJZwVMWH3iE2DEprPAcIscRyjtD2OY3YJC2GGDGsG2vSttaG7tx",
	"MRCPtWDw29xoy6cfttZeUol8I4xf17XUh+RoLY9Vmd6wWLJ9Oxuw/RWcz0gTxfqFRaUzApifpvy/5+Id",
	"4Za7WG7M+UNZqtUdzNE9OfgGmMDNYecOkvB36M+o01hhuO9tVfUknicLumk4KS8W+wXWd4N9Xdc+7leR",
	"cksBSer4/s62YlzEhtno4RJfPE84lI0F2bo8B2tXThx5FypkooqHPeqbVED7NLxPvU2rslXmIrvXjPxY",
	"SbFtzq4Wl/bJfgvrTUujTaqV9LYys4bwlCibS26RqBWJQqEhWYKq7lykBDQ8j+2MZscR/IdG4T63J2Pn",
	"2alLHCEXd/NG35Mryb846I4CvACJfMXB0IyW7OYS5Bo3dPbiLKMll/Xj04xqhn6cpDP650d28s/05Pz6",
	"cfXj5PrX+tWT3x4dohXlcLRxVDL9Qi3ZDS9dSWdnL6bTYFJ8fJqEnGdzbnyJfOxHorXgOh1cdPYYvhpM",
	"Wc4Yb3knniWTbA2mYljyeA6y4HJNlCELJyWX6ycPRrsdTO250DS+0Zk+o7l2d0g8yNKx784u3LVSx/DE",
	"ShmSK2UKLhn6aBfcX7x0CAW5mF8Ry0snIot0hsyAChReqxd63wq1Kn6fv6UZ/QrGRuXPTqenU++I0iCZ",
	"5nRGz06np2c0FMgmxHrSTqVrCLnwmQg3+6KkfwD2qdADN2IvfP9sOo0pkwgyfM+0FjwPN0w+2Ti3Rib5",
	"xtF3tzeLv09xbUiIdWXJzDYanObkIDfphtQDrwLgQI8nMNtO+5YoSZgQFavajOAGJLFRrBnLaDYI3oAI",
	"aTMIv1TF9v7ClqbbXZ9k0DjYPWDyEoNiIoP92dt4zLcNXoRd4fl9GtVbihP2vGRFnb+o+/zH6e7EggkD",
	"rNgSE2l3AOmQYMKIhL+TO/Iesie33YayGyvuwXLumcGwEhD8AvjxlnJvqWcLWvPhsFn1IZZ1ovMfuvDu",
	"+odANfg8npoiiHhoPP8p0JAKyUo5WSR4DoZmjuNg4vfFLusN2UrpHln9r6BwNGsprZOs9dPh8YPp653q",
	"/U13gLmU9r2yPu5+wWRBcgFMOk2sW550O3MA8iZs5gfJKy7uFxvIPz/kUDL4f2BkKuGWRJO3gyjEK0ge",
	"TA2utUP6waGr/tfj4aat/iKRcKxeGcb2g1FS6i8YUYWfzWpGGZuVwzjljKAzukHUs8lEqJwJv9DOzqfn",
	"U7q73v0bAAD//xVsQzyLGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./collector.openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "./requester.openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
