// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CalculationRequest defines model for CalculationRequest.
type CalculationRequest struct {
	A *int `json:"a,omitempty"`
	B *int `json:"b,omitempty"`
}

// CalculationResponse defines model for CalculationResponse.
type CalculationResponse struct {
	Gcd         *string `json:"gcd,omitempty"`
	ProcessTime *string `json:"process_time,omitempty"`
}

// ExperimentData defines model for ExperimentData.
type ExperimentData struct {
	CollectionInterval *int               `json:"collectionInterval,omitempty"`
	Description        *string            `json:"description,omitempty"`
	Duration           *int               `json:"duration,omitempty"`
	EndTime            *string            `json:"endTime,omitempty"`
	ExperimentId       *string            `json:"experimentId,omitempty"`
	Metrics            *[]MetricDataPoint `json:"metrics,omitempty"`
	StartTime          *string            `json:"startTime,omitempty"`
}

// ExperimentListResponse defines model for ExperimentListResponse.
type ExperimentListResponse struct {
	Experiments *[]ExperimentStatus `json:"experiments,omitempty"`
	HasMore     *bool               `json:"hasMore,omitempty"`
	Total       *int                `json:"total,omitempty"`
}

// ExperimentRequest defines model for ExperimentRequest.
type ExperimentRequest struct {
	CollectionInterval int    `json:"collectionInterval"`
	Description        string `json:"description"`
	ExperimentId       string `json:"experimentId"`
	Timeout            int    `json:"timeout"`
}

// ExperimentResponse defines model for ExperimentResponse.
type ExperimentResponse struct {
	ExperimentId *string `json:"experimentId,omitempty"`
	Message      *string `json:"message,omitempty"`
	Status       *string `json:"status,omitempty"`
	Timestamp    *string `json:"timestamp,omitempty"`
}

// ExperimentStatus defines model for ExperimentStatus.
type ExperimentStatus struct {
	DataPointsCollected *int    `json:"dataPointsCollected,omitempty"`
	Duration            *int    `json:"duration,omitempty"`
	EndTime             *string `json:"endTime,omitempty"`
	ExperimentId        *string `json:"experimentId,omitempty"`
	IsActive            *bool   `json:"isActive,omitempty"`
	LastMetrics         *struct {
		CalculatorServiceHealthy *bool    `json:"calculatorServiceHealthy,omitempty"`
		CpuUsagePercent          *float32 `json:"cpuUsagePercent,omitempty"`
		MemoryUsageBytes         *int     `json:"memoryUsageBytes,omitempty"`
		MemoryUsagePercent       *float32 `json:"memoryUsagePercent,omitempty"`
		NetworkIOBytes           *struct {
			BytesReceived   *int `json:"bytesReceived,omitempty"`
			BytesSent       *int `json:"bytesSent,omitempty"`
			PacketsReceived *int `json:"packetsReceived,omitempty"`
			PacketsSent     *int `json:"packetsSent,omitempty"`
		} `json:"networkIOBytes,omitempty"`
	} `json:"lastMetrics,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	Status    *string `json:"status,omitempty"`
}

// Host defines model for Host.
type Host struct {
	CollectorServiceUrl *string `json:"collectorServiceUrl,omitempty"`
	CpuServiceUrl       *string `json:"cpuServiceUrl,omitempty"`
	Ip                  *string `json:"ip,omitempty"`
	Name                *string `json:"name,omitempty"`
}

// HostHealth defines model for HostHealth.
type HostHealth struct {
	CollectorHealth *struct {
		Status    *string `json:"status,omitempty"`
		Timestamp *string `json:"timestamp,omitempty"`
	} `json:"collectorHealth,omitempty"`
	CollectorServiceHealthy *bool   `json:"collectorServiceHealthy,omitempty"`
	CpuServiceHealthy       *bool   `json:"cpuServiceHealthy,omitempty"`
	Ip                      *string `json:"ip,omitempty"`
	Name                    *string `json:"name,omitempty"`
}

// MetricDataPoint defines model for MetricDataPoint.
type MetricDataPoint struct {
	SystemMetrics *struct {
		CalculatorServiceHealthy *bool    `json:"calculatorServiceHealthy,omitempty"`
		CpuUsagePercent          *float32 `json:"cpuUsagePercent,omitempty"`
		MemoryUsageBytes         *int     `json:"memoryUsageBytes,omitempty"`
		MemoryUsagePercent       *float32 `json:"memoryUsagePercent,omitempty"`
		NetworkIOBytes           *struct {
			BytesReceived   *int `json:"bytesReceived,omitempty"`
			BytesSent       *int `json:"bytesSent,omitempty"`
			PacketsReceived *int `json:"packetsReceived,omitempty"`
			PacketsSent     *int `json:"packetsSent,omitempty"`
		} `json:"networkIOBytes,omitempty"`
	} `json:"systemMetrics,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// TestHostCalculationJSONRequestBody defines body for TestHostCalculation for application/json ContentType.
type TestHostCalculationJSONRequestBody = CalculationRequest

// StartHostExperimentJSONRequestBody defines body for StartHostExperiment for application/json ContentType.
type StartHostExperimentJSONRequestBody = ExperimentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHosts request
	GetHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHostCalculationWithBody request with any body
	TestHostCalculationWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestHostCalculation(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostExperiments request
	GetHostExperiments(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartHostExperimentWithBody request with any body
	StartHostExperimentWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartHostExperiment(ctx context.Context, name string, body StartHostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostExperimentData request
	GetHostExperimentData(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostExperimentStatus request
	GetHostExperimentStatus(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopHostExperiment request
	StopHostExperiment(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostHealth request
	GetHostHealth(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHostCalculationWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHostCalculationRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHostCalculation(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHostCalculationRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostExperiments(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostExperimentsRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartHostExperimentWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartHostExperimentRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartHostExperiment(ctx context.Context, name string, body StartHostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartHostExperimentRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostExperimentData(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostExperimentDataRequest(c.Server, name, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostExperimentStatus(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostExperimentStatusRequest(c.Server, name, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopHostExperiment(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopHostExperimentRequest(c.Server, name, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHostHealth(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostHealthRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHostsRequest generates requests for GetHosts
func NewGetHostsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHostCalculationRequest calls the generic TestHostCalculation builder with application/json body
func NewTestHostCalculationRequest(server string, name string, body TestHostCalculationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestHostCalculationRequestWithBody(server, name, "application/json", bodyReader)
}

// NewTestHostCalculationRequestWithBody generates requests for TestHostCalculation with any type of body
func NewTestHostCalculationRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/calculate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHostExperimentsRequest generates requests for GetHostExperiments
func NewGetHostExperimentsRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/experiments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartHostExperimentRequest calls the generic StartHostExperiment builder with application/json body
func NewStartHostExperimentRequest(server string, name string, body StartHostExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartHostExperimentRequestWithBody(server, name, "application/json", bodyReader)
}

// NewStartHostExperimentRequestWithBody generates requests for StartHostExperiment with any type of body
func NewStartHostExperimentRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/experiments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHostExperimentDataRequest generates requests for GetHostExperimentData
func NewGetHostExperimentDataRequest(server string, name string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/experiments/%s/data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostExperimentStatusRequest generates requests for GetHostExperimentStatus
func NewGetHostExperimentStatusRequest(server string, name string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/experiments/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopHostExperimentRequest generates requests for StopHostExperiment
func NewStopHostExperimentRequest(server string, name string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/experiments/%s/stop", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostHealthRequest generates requests for GetHostHealth
func NewGetHostHealthRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hosts/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHostsWithResponse request
	GetHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsResponse, error)

	// TestHostCalculationWithBodyWithResponse request with any body
	TestHostCalculationWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error)

	TestHostCalculationWithResponse(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error)

	// GetHostExperimentsWithResponse request
	GetHostExperimentsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostExperimentsResponse, error)

	// StartHostExperimentWithBodyWithResponse request with any body
	StartHostExperimentWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartHostExperimentResponse, error)

	StartHostExperimentWithResponse(ctx context.Context, name string, body StartHostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartHostExperimentResponse, error)

	// GetHostExperimentDataWithResponse request
	GetHostExperimentDataWithResponse(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*GetHostExperimentDataResponse, error)

	// GetHostExperimentStatusWithResponse request
	GetHostExperimentStatusWithResponse(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*GetHostExperimentStatusResponse, error)

	// StopHostExperimentWithResponse request
	StopHostExperimentWithResponse(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*StopHostExperimentResponse, error)

	// GetHostHealthWithResponse request
	GetHostHealthWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostHealthResponse, error)
}

type GetHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Hosts *[]Host `json:"hosts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHostCalculationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CalculationResponse
}

// Status returns HTTPResponse.Status
func (r TestHostCalculationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHostCalculationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentListResponse
}

// Status returns HTTPResponse.Status
func (r GetHostExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartHostExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
}

// Status returns HTTPResponse.Status
func (r StartHostExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartHostExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostExperimentDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentData
}

// Status returns HTTPResponse.Status
func (r GetHostExperimentDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostExperimentDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostExperimentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentStatus
}

// Status returns HTTPResponse.Status
func (r GetHostExperimentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostExperimentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopHostExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
}

// Status returns HTTPResponse.Status
func (r StopHostExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopHostExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostHealth
}

// Status returns HTTPResponse.Status
func (r GetHostHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHostsWithResponse request returning *GetHostsResponse
func (c *ClientWithResponses) GetHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostsResponse, error) {
	rsp, err := c.GetHosts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsResponse(rsp)
}

// TestHostCalculationWithBodyWithResponse request with arbitrary body returning *TestHostCalculationResponse
func (c *ClientWithResponses) TestHostCalculationWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error) {
	rsp, err := c.TestHostCalculationWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHostCalculationResponse(rsp)
}

func (c *ClientWithResponses) TestHostCalculationWithResponse(ctx context.Context, name string, body TestHostCalculationJSONRequestBody, reqEditors ...RequestEditorFn) (*TestHostCalculationResponse, error) {
	rsp, err := c.TestHostCalculation(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHostCalculationResponse(rsp)
}

// GetHostExperimentsWithResponse request returning *GetHostExperimentsResponse
func (c *ClientWithResponses) GetHostExperimentsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostExperimentsResponse, error) {
	rsp, err := c.GetHostExperiments(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostExperimentsResponse(rsp)
}

// StartHostExperimentWithBodyWithResponse request with arbitrary body returning *StartHostExperimentResponse
func (c *ClientWithResponses) StartHostExperimentWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartHostExperimentResponse, error) {
	rsp, err := c.StartHostExperimentWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartHostExperimentResponse(rsp)
}

func (c *ClientWithResponses) StartHostExperimentWithResponse(ctx context.Context, name string, body StartHostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartHostExperimentResponse, error) {
	rsp, err := c.StartHostExperiment(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartHostExperimentResponse(rsp)
}

// GetHostExperimentDataWithResponse request returning *GetHostExperimentDataResponse
func (c *ClientWithResponses) GetHostExperimentDataWithResponse(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*GetHostExperimentDataResponse, error) {
	rsp, err := c.GetHostExperimentData(ctx, name, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostExperimentDataResponse(rsp)
}

// GetHostExperimentStatusWithResponse request returning *GetHostExperimentStatusResponse
func (c *ClientWithResponses) GetHostExperimentStatusWithResponse(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*GetHostExperimentStatusResponse, error) {
	rsp, err := c.GetHostExperimentStatus(ctx, name, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostExperimentStatusResponse(rsp)
}

// StopHostExperimentWithResponse request returning *StopHostExperimentResponse
func (c *ClientWithResponses) StopHostExperimentWithResponse(ctx context.Context, name string, experimentId string, reqEditors ...RequestEditorFn) (*StopHostExperimentResponse, error) {
	rsp, err := c.StopHostExperiment(ctx, name, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopHostExperimentResponse(rsp)
}

// GetHostHealthWithResponse request returning *GetHostHealthResponse
func (c *ClientWithResponses) GetHostHealthWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHostHealthResponse, error) {
	rsp, err := c.GetHostHealth(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostHealthResponse(rsp)
}

// ParseGetHostsResponse parses an HTTP response from a GetHostsWithResponse call
func ParseGetHostsResponse(rsp *http.Response) (*GetHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Hosts *[]Host `json:"hosts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestHostCalculationResponse parses an HTTP response from a TestHostCalculationWithResponse call
func ParseTestHostCalculationResponse(rsp *http.Response) (*TestHostCalculationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHostCalculationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CalculationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostExperimentsResponse parses an HTTP response from a GetHostExperimentsWithResponse call
func ParseGetHostExperimentsResponse(rsp *http.Response) (*GetHostExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartHostExperimentResponse parses an HTTP response from a StartHostExperimentWithResponse call
func ParseStartHostExperimentResponse(rsp *http.Response) (*StartHostExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartHostExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostExperimentDataResponse parses an HTTP response from a GetHostExperimentDataWithResponse call
func ParseGetHostExperimentDataResponse(rsp *http.Response) (*GetHostExperimentDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostExperimentDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostExperimentStatusResponse parses an HTTP response from a GetHostExperimentStatusWithResponse call
func ParseGetHostExperimentStatusResponse(rsp *http.Response) (*GetHostExperimentStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostExperimentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStopHostExperimentResponse parses an HTTP response from a StopHostExperimentWithResponse call
func ParseStopHostExperimentResponse(rsp *http.Response) (*StopHostExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopHostExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostHealthResponse parses an HTTP response from a GetHostHealthWithResponse call
func ParseGetHostHealthResponse(rsp *http.Response) (*GetHostHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostHealth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取所有主机列表
	// (GET /api/hosts)
	GetHosts(c *gin.Context)
	// 测试主机CPU计算
	// (POST /api/hosts/{name}/calculate)
	TestHostCalculation(c *gin.Context, name string)
	// 获取主机实验列表
	// (GET /api/hosts/{name}/experiments)
	GetHostExperiments(c *gin.Context, name string)
	// 在主机上启动实验
	// (POST /api/hosts/{name}/experiments)
	StartHostExperiment(c *gin.Context, name string)
	// 获取实验数据
	// (GET /api/hosts/{name}/experiments/{experimentId}/data)
	GetHostExperimentData(c *gin.Context, name string, experimentId string)
	// 获取实验状态
	// (GET /api/hosts/{name}/experiments/{experimentId}/status)
	GetHostExperimentStatus(c *gin.Context, name string, experimentId string)
	// 停止实验
	// (POST /api/hosts/{name}/experiments/{experimentId}/stop)
	StopHostExperiment(c *gin.Context, name string, experimentId string)
	// 检查主机健康状态
	// (GET /api/hosts/{name}/health)
	GetHostHealth(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHosts operation middleware
func (siw *ServerInterfaceWrapper) GetHosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHosts(c)
}

// TestHostCalculation operation middleware
func (siw *ServerInterfaceWrapper) TestHostCalculation(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TestHostCalculation(c, name)
}

// GetHostExperiments operation middleware
func (siw *ServerInterfaceWrapper) GetHostExperiments(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostExperiments(c, name)
}

// StartHostExperiment operation middleware
func (siw *ServerInterfaceWrapper) StartHostExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartHostExperiment(c, name)
}

// GetHostExperimentData operation middleware
func (siw *ServerInterfaceWrapper) GetHostExperimentData(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostExperimentData(c, name, experimentId)
}

// GetHostExperimentStatus operation middleware
func (siw *ServerInterfaceWrapper) GetHostExperimentStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostExperimentStatus(c, name, experimentId)
}

// StopHostExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopHostExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopHostExperiment(c, name, experimentId)
}

// GetHostHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHostHealth(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHostHealth(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/hosts", wrapper.GetHosts)
	router.POST(options.BaseURL+"/api/hosts/:name/calculate", wrapper.TestHostCalculation)
	router.GET(options.BaseURL+"/api/hosts/:name/experiments", wrapper.GetHostExperiments)
	router.POST(options.BaseURL+"/api/hosts/:name/experiments", wrapper.StartHostExperiment)
	router.GET(options.BaseURL+"/api/hosts/:name/experiments/:experimentId/data", wrapper.GetHostExperimentData)
	router.GET(options.BaseURL+"/api/hosts/:name/experiments/:experimentId/status", wrapper.GetHostExperimentStatus)
	router.POST(options.BaseURL+"/api/hosts/:name/experiments/:experimentId/stop", wrapper.StopHostExperiment)
	router.GET(options.BaseURL+"/api/hosts/:name/health", wrapper.GetHostHealth)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYQW8bRRT+K9XQA6Bt1iUSUvaC0rQikRph1ckpCmi8frWn3d3ZzsyamshSckE0lFIJ",
	"SiVkWqVQKapEygUaJUj8mdhOT/wFNDNre9eeXTs0DoroJVnPfvPmzfe+N/PebiCX+iENIBAcORuIuzXw",
	"sXpcwJ4beVgQGtyAOxFwIUdDRkNggoDCYPlHNEJADiKBgCow1LRQ2TTctHpDtHwLXCGBqTV4SAMOo4tU",
	"3UrCHheMBFU5OWTUBc4/E8QHA8C03rW7ITDiQyCuYoFHl3Kp54Er3VkKBLA69swbrAB3GQkl0OhaJWJ4",
	"6GViNgSVFbPPFoK+h0tq1z6+ex2Cqqgh58NZC/kk6P28bKEQCwEsQA76dA1f+qJwaW793fjh0vr7vaH3",
	"PrqIrNGVfBCMuGrbRICvHi4yuIkc9I49UIUdS8JeVnjJW5GSQNEZ28SM4Yb8zQVmYuXfhOM64SJbAQNS",
	"Jnd3YLsksIi4yd8a5suUJb0tU+oBDhSYCnP483eSmSunpa2zU4hMLBqJDA4Y3IkIgwpy1tI+pbcwMGOZ",
	"KFgfQ+Z4SUw/TzjHVXO2ci0t0yu5ay6wH544F0p9o+ktV3qpxxc0j1DJUNA5OH0In3cFqWfknoe5WB6c",
	"T0OJFF8alJWA1YkLi4A9UWuYTblhtCrjVwTmQpAUcxD5ZU2JDz5lDQW70hDAzcQlUHnGAhCfU3Z76ZO+",
	"qbT7ZTl8A1wg9awAKkgpvUDidYjd2yDG2IhBWVZGJWgSZd6BnqN+k6lFmnMo9kO5yjzjUm4YjUGQ0Dgc",
	"4IlvI+mhllKOn1mAUzwJhjkZJ+9JYG/OzvD1P8pAgwvw32btf5+1JxOcHCLBTaqumGTtgbp7O92HX77+",
	"6dl8cenvP+93v989OnigB9u//Hi0/2KhuHp0+Fe39fRo/7DTOlB3vfCk8YXi6oUS8ePa/sJVzGtlilnl",
	"wnxxCVmoDozrNS7PFGYK0mkaQoBDghw0O1OYmUXqfqkp7m0cErtGua7+qqCokcFRxuVNhT4GsagAsi7R",
	"NYMCf1Ao6PQNREwpDkOPuGqmfYvrS1LXjKNB7685UcWpTriRKtNMeJpoTV/7q8fHO7tqBo98H7MGctDx",
	"g1ftb3/o3NvstO6NwAbE2BsylZt2L8t0xRQfuWmqVoArrhK9lyKbYR8EMI6ctQ1EpFsyAKh3SOh/ybJP",
	"sAisBHfDSlvXYODiCq00ThSGPJoNfWmzqQvSNwj8xCvGBakhisd7O929x93D7zpPWkNR7Pz+9fHLRzp+",
	"C8VVjcwI4VCzkyf3awno9EI4JVYzmj8Dse29J69f3M9JjzgxUjArQ/4lWdKkyTtX8h/tNKesfkM3lh2j",
	"hy/b27vGFGi3dnWYjva3NUxPGZ8F9kayLWnalfjTzWSZoT70TCXAltHMUCucbW5avdUZJa3iNVMInUe/",
	"db7ZMybrCOBEwR/U2ZOFP26m3wrg1AXQ+6yWJYHu9h+dza0cCSQAJ5QADbPLm5Kg4Vkc7//v4OdeBVut",
	"zq/PzJeAepV78Nf6DXZegsdt+LkrehK+Z/cBW8/bB6+M6dP5ebPz9LkRJnHA6j0i0oYH/ZfGIAtFzEMO",
	"qgkROrbtURd7MgzOXGGugJrrzX8CAAD//++Be4IZGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
