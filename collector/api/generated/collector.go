// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ExperimentResponseStatus.
const (
	ExperimentResponseStatusStarted ExperimentResponseStatus = "started"
	ExperimentResponseStatusStopped ExperimentResponseStatus = "stopped"
	ExperimentResponseStatusTimeout ExperimentResponseStatus = "timeout"
)

// Defines values for ExperimentSummaryStatus.
const (
	ExperimentSummaryStatusError   ExperimentSummaryStatus = "error"
	ExperimentSummaryStatusRunning ExperimentSummaryStatus = "running"
	ExperimentSummaryStatusStopped ExperimentSummaryStatus = "stopped"
	ExperimentSummaryStatusTimeout ExperimentSummaryStatus = "timeout"
)

// Defines values for HealthResponseStatus.
const (
	Healthy   HealthResponseStatus = "healthy"
	Unhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for StatusResponseStatus.
const (
	StatusResponseStatusPending StatusResponseStatus = "Pending"
	StatusResponseStatusRunning StatusResponseStatus = "Running"
)

// Defines values for ListExperimentsParamsStatus.
const (
	ListExperimentsParamsStatusAll     ListExperimentsParamsStatus = "all"
	ListExperimentsParamsStatusError   ListExperimentsParamsStatus = "error"
	ListExperimentsParamsStatusRunning ListExperimentsParamsStatus = "running"
	ListExperimentsParamsStatusStopped ListExperimentsParamsStatus = "stopped"
	ListExperimentsParamsStatusTimeout ListExperimentsParamsStatus = "timeout"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details map[string]interface{} `json:"details,omitempty"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

// ExperimentData defines model for ExperimentData.
type ExperimentData struct {
	// CollectionInterval Collection interval in milliseconds
	CollectionInterval int    `json:"collectionInterval,omitempty"`
	Description        string `json:"description,omitempty"`

	// Duration Duration in seconds
	Duration     int               `json:"duration,omitempty"`
	EndTime      time.Time         `json:"endTime,omitempty"`
	ExperimentId string            `json:"experimentId"`
	Metrics      []MetricDataPoint `json:"metrics"`
	StartTime    time.Time         `json:"startTime"`
}

// ExperimentListResponse defines model for ExperimentListResponse.
type ExperimentListResponse struct {
	Experiments []ExperimentSummary `json:"experiments"`

	// HasMore Whether there are more experiments available
	HasMore bool `json:"hasMore,omitempty"`

	// Total Total number of experiments matching the criteria
	Total int `json:"total"`
}

// ExperimentResponse defines model for ExperimentResponse.
type ExperimentResponse struct {
	ExperimentId string                   `json:"experimentId"`
	Message      string                   `json:"message,omitempty"`
	Status       ExperimentResponseStatus `json:"status"`
	Timestamp    time.Time                `json:"timestamp"`
}

// ExperimentResponseStatus defines model for ExperimentResponse.Status.
type ExperimentResponseStatus string

// ExperimentSummary defines model for ExperimentSummary.
type ExperimentSummary struct {
	// DataPointsCollected Number of metric data points collected
	DataPointsCollected int    `json:"dataPointsCollected,omitempty"`
	Description         string `json:"description,omitempty"`

	// Duration Duration in seconds
	Duration     int                     `json:"duration,omitempty"`
	EndTime      time.Time               `json:"endTime,omitempty"`
	ExperimentId string                  `json:"experimentId"`
	IsActive     bool                    `json:"isActive"`
	StartTime    time.Time               `json:"startTime"`
	Status       ExperimentSummaryStatus `json:"status"`
}

// ExperimentSummaryStatus defines model for ExperimentSummary.Status.
type ExperimentSummaryStatus string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    HealthResponseStatus `json:"status"`
	Timestamp time.Time            `json:"timestamp"`

	// Uptime Service uptime in seconds
	Uptime int `json:"uptime,omitempty"`
}

// HealthResponseStatus defines model for HealthResponse.Status.
type HealthResponseStatus string

// MetricDataPoint defines model for MetricDataPoint.
type MetricDataPoint struct {
	SystemMetrics SystemMetrics `json:"systemMetrics"`
	Timestamp     time.Time     `json:"timestamp"`
}

// NetworkIO defines model for NetworkIO.
type NetworkIO struct {
	// BytesReceived Bytes received per second
	BytesReceived int64 `json:"bytesReceived"`

	// BytesSent Bytes sent per second
	BytesSent int64 `json:"bytesSent"`

	// PacketsReceived Packets received per second
	PacketsReceived int64 `json:"packetsReceived"`

	// PacketsSent Packets sent per second
	PacketsSent int64 `json:"packetsSent"`
}

// ServiceConfig 服务全局配置
type ServiceConfig struct {
	// CalculatorProcess 要监控的Calculator进程名
	CalculatorProcess string `json:"calculatorProcess,omitempty"`

	// CollectionInterval 数据采集间隔（秒）
	CollectionInterval int `json:"collectionInterval,omitempty"`
}

// StartExperimentRequest defines model for StartExperimentRequest.
type StartExperimentRequest struct {
	// Description Optional description of the experiment
	Description string `json:"description,omitempty"`

	// ExperimentId Unique identifier for the experiment (kubernetes-style naming)
	ExperimentId string `json:"experimentId"`

	// Timeout Experiment timeout in seconds (1-3600)
	Timeout int `json:"timeout"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	// CurrentExperimentId ID of the currently running experiment (empty if no experiment is running)
	CurrentExperimentId string `json:"currentExperimentId,omitempty"`

	// Status Current service status
	Status StatusResponseStatus `json:"status"`
}

// StatusResponseStatus Current service status
type StatusResponseStatus string

// SystemMetrics defines model for SystemMetrics.
type SystemMetrics struct {
	// CalculatorServiceHealthy Whether calculator service is responding
	CalculatorServiceHealthy bool `json:"calculatorServiceHealthy"`

	// CpuUsagePercent CPU usage percentage
	CpuUsagePercent float32 `json:"cpuUsagePercent"`

	// MemoryUsageBytes Memory usage in bytes
	MemoryUsageBytes int64 `json:"memoryUsageBytes"`

	// MemoryUsagePercent Memory usage percentage
	MemoryUsagePercent float32   `json:"memoryUsagePercent"`
	NetworkIOBytes     NetworkIO `json:"networkIOBytes"`
}

// ListExperimentsParams defines parameters for ListExperiments.
type ListExperimentsParams struct {
	// Status Filter experiments by status
	Status ListExperimentsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Limit Maximum number of experiments to return
	Limit int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListExperimentsParamsStatus defines parameters for ListExperiments.
type ListExperimentsParamsStatus string

// StartExperimentJSONRequestBody defines body for StartExperiment for application/json ContentType.
type StartExperimentJSONRequestBody = StartExperimentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetServiceConfig request
	GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperiments request
	ListExperiments(ctx context.Context, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartExperimentWithBody request with any body
	StartExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartExperiment(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperimentData request
	GetExperimentData(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopExperiment request
	StopExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperiments(ctx context.Context, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperimentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartExperiment(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperimentData(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentDataRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetServiceConfigRequest generates requests for GetServiceConfig
func NewGetServiceConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExperimentsRequest generates requests for ListExperiments
func NewListExperimentsRequest(server string, params *ListExperimentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartExperimentRequest calls the generic StartExperiment builder with application/json body
func NewStartExperimentRequest(server string, body StartExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewStartExperimentRequestWithBody generates requests for StartExperiment with any type of body
func NewStartExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExperimentDataRequest generates requests for GetExperimentData
func NewGetExperimentDataRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopExperimentRequest generates requests for StopExperiment
func NewStopExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetServiceConfigWithResponse request
	GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error)

	// ListExperimentsWithResponse request
	ListExperimentsWithResponse(ctx context.Context, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*ListExperimentsResponse, error)

	// StartExperimentWithBodyWithResponse request with any body
	StartExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error)

	StartExperimentWithResponse(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error)

	// GetExperimentDataWithResponse request
	GetExperimentDataWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error)

	// StopExperimentWithResponse request
	StopExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopExperimentResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)
}

type GetServiceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceConfig
}

// Status returns HTTPResponse.Status
func (r GetServiceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentData
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetExperimentDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperimentResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StopExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponse
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetServiceConfigWithResponse request returning *GetServiceConfigResponse
func (c *ClientWithResponses) GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error) {
	rsp, err := c.GetServiceConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceConfigResponse(rsp)
}

// ListExperimentsWithResponse request returning *ListExperimentsResponse
func (c *ClientWithResponses) ListExperimentsWithResponse(ctx context.Context, params *ListExperimentsParams, reqEditors ...RequestEditorFn) (*ListExperimentsResponse, error) {
	rsp, err := c.ListExperiments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperimentsResponse(rsp)
}

// StartExperimentWithBodyWithResponse request with arbitrary body returning *StartExperimentResponse
func (c *ClientWithResponses) StartExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error) {
	rsp, err := c.StartExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentResponse(rsp)
}

func (c *ClientWithResponses) StartExperimentWithResponse(ctx context.Context, body StartExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartExperimentResponse, error) {
	rsp, err := c.StartExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartExperimentResponse(rsp)
}

// GetExperimentDataWithResponse request returning *GetExperimentDataResponse
func (c *ClientWithResponses) GetExperimentDataWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetExperimentDataResponse, error) {
	rsp, err := c.GetExperimentData(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentDataResponse(rsp)
}

// StopExperimentWithResponse request returning *StopExperimentResponse
func (c *ClientWithResponses) StopExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopExperimentResponse, error) {
	rsp, err := c.StopExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopExperimentResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// ParseGetServiceConfigResponse parses an HTTP response from a GetServiceConfigWithResponse call
func ParseGetServiceConfigResponse(rsp *http.Response) (*GetServiceConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListExperimentsResponse parses an HTTP response from a ListExperimentsWithResponse call
func ParseListExperimentsResponse(rsp *http.Response) (*ListExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStartExperimentResponse parses an HTTP response from a StartExperimentWithResponse call
func ParseStartExperimentResponse(rsp *http.Response) (*StartExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetExperimentDataResponse parses an HTTP response from a GetExperimentDataWithResponse call
func ParseGetExperimentDataResponse(rsp *http.Response) (*GetExperimentDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStopExperimentResponse parses an HTTP response from a StopExperimentWithResponse call
func ParseStopExperimentResponse(rsp *http.Response) (*StopExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperimentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get service configuration
	// (GET /config)
	GetServiceConfig(c *gin.Context)
	// List experiments
	// (GET /experiments)
	ListExperiments(c *gin.Context, params ListExperimentsParams)
	// Start a new experiment
	// (POST /experiments)
	StartExperiment(c *gin.Context)
	// Get experiment data
	// (GET /experiments/{experimentId}/data)
	GetExperimentData(c *gin.Context, experimentId string)
	// Stop an experiment
	// (POST /experiments/{experimentId}/stop)
	StopExperiment(c *gin.Context, experimentId string)
	// Health check
	// (GET /health)
	HealthCheck(c *gin.Context)
	// Get service status
	// (GET /status)
	GetStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetServiceConfig operation middleware
func (siw *ServerInterfaceWrapper) GetServiceConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceConfig(c)
}

// ListExperiments operation middleware
func (siw *ServerInterfaceWrapper) ListExperiments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExperimentsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListExperiments(c, params)
}

// StartExperiment operation middleware
func (siw *ServerInterfaceWrapper) StartExperiment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartExperiment(c)
}

// GetExperimentData operation middleware
func (siw *ServerInterfaceWrapper) GetExperimentData(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExperimentData(c, experimentId)
}

// StopExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopExperiment(c, experimentId)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/config", wrapper.GetServiceConfig)
	router.GET(options.BaseURL+"/experiments", wrapper.ListExperiments)
	router.POST(options.BaseURL+"/experiments", wrapper.StartExperiment)
	router.GET(options.BaseURL+"/experiments/:experimentId/data", wrapper.GetExperimentData)
	router.POST(options.BaseURL+"/experiments/:experimentId/stop", wrapper.StopExperiment)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
	router.GET(options.BaseURL+"/status", wrapper.GetStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
