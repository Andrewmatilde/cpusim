openapi: 3.0.3
info:
  title: CPU Simulation Dashboard API
  description: Dashboard service for coordinating distributed CPU simulation experiments
  version: 2.0.0
servers:
  - url: http://localhost:9090
    description: Dashboard server
security: []

paths:
  /config:
    get:
      summary: Get service configuration
      operationId: getServiceConfig
      responses:
        '200':
          description: Service configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceConfig'

  /status:
    get:
      summary: Get experiment manager status
      operationId: getStatus
      responses:
        '200':
          description: Current status (Pending or Running)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /experiments:
    get:
      summary: List all stored experiments
      description: Returns a list of all experiments with metadata
      operationId: listExperiments
      responses:
        '200':
          description: List of experiments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentListResponse'
    post:
      summary: Start a new dashboard experiment
      description: Starts collectors on all targets, then starts requester
      operationId: startExperiment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartExperimentRequest'
      responses:
        '200':
          description: Experiment started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Experiment already running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiments/{experimentId}/stop:
    post:
      summary: Stop the running experiment and cleanup sub-experiments
      operationId: stopExperiment
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
      responses:
        '200':
          description: Experiment stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentResponse'
        '404':
          description: Experiment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: No experiment running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiments/{experimentId}:
    get:
      summary: Get experiment data
      operationId: getExperimentData
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
      responses:
        '200':
          description: Experiment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentData'
        '404':
          description: Experiment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiment-groups:
    post:
      summary: Start a new experiment group
      description: Creates and starts an experiment group with multiple repeated experiments
      operationId: startExperimentGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartExperimentGroupRequest'
      responses:
        '200':
          description: Experiment group started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentGroupResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Service is busy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List all experiment groups
      description: Returns a list of all experiment groups with metadata
      operationId: listExperimentGroups
      responses:
        '200':
          description: List of experiment groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentGroupListResponse'

  /experiment-groups/{groupId}:
    get:
      summary: Get experiment group with all experiment details
      description: Returns experiment group metadata and all associated experiment data
      operationId: getExperimentGroupWithDetails
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
      responses:
        '200':
          description: Experiment group with details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentGroupDetail'
        '404':
          description: Experiment group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /hosts/status:
    get:
      summary: Get status of all hosts
      description: Query status of all target and client hosts
      operationId: getHostsStatus
      responses:
        '200':
          description: Status of all hosts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsStatusResponse'

  /health:
    get:
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  schemas:
    ServiceConfig:
      type: object
      description: Dashboard service configuration (only service URLs)
      properties:
        targetHosts:
          type: array
          description: List of target hosts to collect metrics from
          items:
            $ref: '#/components/schemas/TargetHost'
        clientHost:
          $ref: '#/components/schemas/ClientHost'

    TargetHost:
      type: object
      properties:
        name:
          type: string
        externalIP:
          type: string
        internalIP:
          type: string
        cpuServiceURL:
          type: string
        collectorServiceURL:
          type: string

    ClientHost:
      type: object
      properties:
        name:
          type: string
        externalIP:
          type: string
        internalIP:
          type: string
        requesterServiceURL:
          type: string

    StartExperimentRequest:
      type: object
      required:
        - experimentId
        - timeout
        - qps
      properties:
        experimentId:
          type: string
          pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
          minLength: 1
          maxLength: 63
          description: Unique experiment identifier
        timeout:
          type: integer
          minimum: 1
          maximum: 3600
          description: Experiment timeout in seconds
        qps:
          type: integer
          minimum: 1
          maximum: 1000
          description: Requests per second for the experiment
          example: 10

    ExperimentResponse:
      type: object
      properties:
        experimentId:
          type: string
        status:
          type: string
          description: Response status
        timestamp:
          type: string
          format: date-time
        message:
          type: string

    StatusResponse:
      type: object
      properties:
        status:
          type: string
          description: Current experiment manager status (Pending or Running)
        timestamp:
          type: string
          format: date-time

    HostsStatusResponse:
      type: object
      properties:
        targetHostsStatus:
          type: array
          description: Status of target hosts (collectors)
          items:
            $ref: '#/components/schemas/TargetHostStatus'
        clientHostStatus:
          $ref: '#/components/schemas/ClientHostStatus'
        timestamp:
          type: string
          format: date-time

    TargetHostStatus:
      type: object
      properties:
        name:
          type: string
          description: Host name
        status:
          type: string
          description: Service status (Pending, Running, or Error)
        currentExperimentId:
          type: string
          description: Current experiment ID if running
        error:
          type: string
          description: Error message if failed to query

    ClientHostStatus:
      type: object
      properties:
        name:
          type: string
          description: Host name
        status:
          type: string
          description: Service status (Pending, Running, or Error)
        currentExperimentId:
          type: string
          description: Current experiment ID if running
        error:
          type: string
          description: Error message if failed to query

    ExperimentListResponse:
      type: object
      properties:
        experiments:
          type: array
          description: List of stored experiments
          items:
            $ref: '#/components/schemas/ExperimentInfo'
        total:
          type: integer
          description: Total number of experiments
        timestamp:
          type: string
          format: date-time

    ExperimentInfo:
      type: object
      description: Metadata about a stored experiment
      properties:
        id:
          type: string
          description: Experiment ID
        createdAt:
          type: string
          format: date-time
          description: When the experiment was created
        modifiedAt:
          type: string
          format: date-time
          description: When the experiment was last modified
        fileSizeKB:
          type: integer
          format: int64
          description: Size of the experiment data file in KB

    ExperimentData:
      type: object
      description: Complete dashboard experiment result
      properties:
        config:
          $ref: '#/components/schemas/ServiceConfig'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: number
          description: Duration in seconds
        status:
          type: string
          description: Experiment status
        collectorResults:
          type: object
          description: Results from collector experiments, keyed by host name
          additionalProperties:
            $ref: '#/components/schemas/CollectorResult'
        requesterResult:
          $ref: '#/components/schemas/RequesterResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentError'

    CollectorResult:
      type: object
      properties:
        hostName:
          type: string
        status:
          type: string
          description: completed, failed, not_started
        error:
          type: string
        data:
          $ref: './collector.openapi.yaml#/components/schemas/ExperimentData'

    RequesterResult:
      type: object
      properties:
        status:
          type: string
          description: completed, failed, not_started
        error:
          type: string
        stats:
          $ref: './requester.openapi.yaml#/components/schemas/RequestExperimentStats'

    ExperimentError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        phase:
          type: string
          description: collector_start, requester_start, stop, etc.
        hostName:
          type: string
        message:
          type: string

    StartExperimentGroupRequest:
      type: object
      required:
        - groupId
        - repeatCount
        - timeout
        - qps
      properties:
        groupId:
          type: string
          pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
          minLength: 1
          maxLength: 63
          description: Unique experiment group identifier
        description:
          type: string
          description: Optional description of the experiment group
        repeatCount:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of times to repeat the experiment
        timeout:
          type: integer
          minimum: 1
          maximum: 3600
          description: Timeout for each experiment in seconds
        qps:
          type: integer
          minimum: 1
          maximum: 1000
          description: Requests per second for each experiment
        delayBetween:
          type: integer
          minimum: 0
          maximum: 3600
          default: 0
          description: Delay between experiments in seconds

    ExperimentGroupResponse:
      type: object
      properties:
        groupId:
          type: string
        status:
          type: string
          description: Response status
        timestamp:
          type: string
          format: date-time
        message:
          type: string

    ExperimentGroup:
      type: object
      properties:
        groupId:
          type: string
          description: Unique experiment group identifier
        description:
          type: string
          description: Optional description
        config:
          $ref: '#/components/schemas/ExperimentGroupConfig'
        experiments:
          type: array
          description: List of experiment IDs in this group
          items:
            type: string
        startTime:
          type: string
          format: date-time
          description: When the group started
        endTime:
          type: string
          format: date-time
          description: When the group completed
        status:
          type: string
          description: running, completed, failed
        currentRun:
          type: integer
          description: Current execution number (1-based)
        statistics:
          type: object
          description: Steady-state statistics per host (calculated when group is completed)
          additionalProperties:
            $ref: '#/components/schemas/SteadyStateStats'

    ExperimentGroupConfig:
      type: object
      properties:
        repeatCount:
          type: integer
          description: Number of times to repeat the experiment
        timeout:
          type: integer
          description: Timeout for each experiment in seconds
        qps:
          type: integer
          description: Requests per second for each experiment
        delayBetween:
          type: integer
          description: Delay between experiments in seconds

    SteadyStateStats:
      type: object
      description: Steady-state performance statistics with confidence intervals
      properties:
        cpuMean:
          type: number
          description: Mean CPU usage across all experiments (steady-state)
        cpuStdDev:
          type: number
          description: Standard deviation of CPU usage
        cpuConfLower:
          type: number
          description: Lower bound of 95% confidence interval
        cpuConfUpper:
          type: number
          description: Upper bound of 95% confidence interval
        cpuMin:
          type: number
          description: Minimum CPU value observed
        cpuMax:
          type: number
          description: Maximum CPU value observed
        sampleSize:
          type: integer
          description: Number of experiments used in calculation
        confidenceLevel:
          type: number
          description: Confidence level (e.g., 0.95 for 95%)

    ExperimentGroupListResponse:
      type: object
      properties:
        groups:
          type: array
          description: List of experiment groups
          items:
            $ref: '#/components/schemas/ExperimentGroup'
        total:
          type: integer
          description: Total number of groups
        timestamp:
          type: string
          format: date-time

    ExperimentGroupDetail:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/ExperimentGroup'
        experimentDetails:
          type: array
          description: Full data for all experiments in the group
          items:
            $ref: '#/components/schemas/ExperimentData'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    HealthResponse:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        uptime:
          type: integer
          description: Service uptime in seconds
