openapi: 3.0.3
info:
  title: CPU Simulation Dashboard API
  description: Dashboard service for coordinating distributed CPU simulation experiments
  version: 2.0.0
servers:
  - url: http://localhost:9090
    description: Dashboard server
security: []

paths:
  /config:
    get:
      summary: Get service configuration
      operationId: getServiceConfig
      responses:
        '200':
          description: Service configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceConfig'

  /status:
    get:
      summary: Get experiment manager status
      operationId: getStatus
      responses:
        '200':
          description: Current status (Pending or Running)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /experiments:
    post:
      summary: Start a new dashboard experiment
      description: Starts collectors on all targets, then starts requester
      operationId: startExperiment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartExperimentRequest'
      responses:
        '200':
          description: Experiment started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Experiment already running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiments/{experimentId}/stop:
    post:
      summary: Stop the running experiment and cleanup sub-experiments
      operationId: stopExperiment
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
      responses:
        '200':
          description: Experiment stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentResponse'
        '404':
          description: Experiment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: No experiment running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiments/{experimentId}:
    get:
      summary: Get experiment data
      operationId: getExperimentData
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
      responses:
        '200':
          description: Experiment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentData'
        '404':
          description: Experiment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  schemas:
    ServiceConfig:
      type: object
      description: Dashboard service configuration (only service URLs)
      properties:
        targetHosts:
          type: array
          description: List of target hosts to collect metrics from
          items:
            $ref: '#/components/schemas/TargetHost'
        clientHost:
          $ref: '#/components/schemas/ClientHost'

    TargetHost:
      type: object
      properties:
        name:
          type: string
        externalIP:
          type: string
        internalIP:
          type: string
        cpuServiceURL:
          type: string
        collectorServiceURL:
          type: string

    ClientHost:
      type: object
      properties:
        name:
          type: string
        externalIP:
          type: string
        internalIP:
          type: string
        requesterServiceURL:
          type: string

    StartExperimentRequest:
      type: object
      required:
        - experimentId
        - timeout
      properties:
        experimentId:
          type: string
          pattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
          minLength: 1
          maxLength: 63
          description: Unique experiment identifier
        timeout:
          type: integer
          minimum: 1
          maximum: 3600
          description: Experiment timeout in seconds

    ExperimentResponse:
      type: object
      properties:
        experimentId:
          type: string
        status:
          type: string
          description: Response status
        timestamp:
          type: string
          format: date-time
        message:
          type: string

    StatusResponse:
      type: object
      properties:
        status:
          type: string
          description: Current experiment manager status (Pending or Running)
        timestamp:
          type: string
          format: date-time

    ExperimentData:
      type: object
      description: Complete dashboard experiment result
      properties:
        config:
          $ref: '#/components/schemas/ServiceConfig'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: number
          description: Duration in seconds
        status:
          type: string
          description: Experiment status
        collectorResults:
          type: object
          description: Results from collector experiments, keyed by host name
          additionalProperties:
            $ref: '#/components/schemas/CollectorResult'
        requesterResult:
          $ref: '#/components/schemas/RequesterResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentError'

    CollectorResult:
      type: object
      properties:
        hostName:
          type: string
        experimentId:
          type: string
        status:
          type: string
        dataPointsCollected:
          type: integer
        error:
          type: string

    RequesterResult:
      type: object
      properties:
        experimentId:
          type: string
        status:
          type: string
        totalRequests:
          type: integer
          format: int64
        successful:
          type: integer
          format: int64
        failed:
          type: integer
          format: int64
        avgResponseTime:
          type: number
          format: double
        error:
          type: string

    ExperimentError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        phase:
          type: string
          description: collector_start, requester_start, stop, etc.
        hostName:
          type: string
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    HealthResponse:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        uptime:
          type: integer
          description: Service uptime in seconds
