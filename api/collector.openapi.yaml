openapi: 3.0.3
info:
  title: Data Collector API
  description: System metrics data collector for CPU simulation experiments
  version: 1.0.0
  contact:
    name: CPU Simulation Project
    url: https://github.com/Andrewmatilde/cpusim

servers:
  - url: http://localhost:8080
    description: Local development server
security: []
paths:
  /experiments:
    get:
      summary: List experiments
      description: Get a list of all experiments (active and completed)
      operationId: listExperiments
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [running, stopped, timeout, error, all]
            default: all
          description: Filter experiments by status
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Maximum number of experiments to return
      responses:
        '200':
          description: List of experiments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Start a new experiment
      description: Begin collecting system metrics for a new experiment
      operationId: startExperiment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartExperimentRequest'
      responses:
        '200':
          description: Experiment started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Experiment already running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiments/{experimentId}/stop:
    post:
      summary: Stop an experiment
      description: Stop collecting metrics and save data to storage
      operationId: stopExperiment
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The experiment ID to stop
      responses:
        '200':
          description: Experiment stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentResponse'
        '404':
          description: Experiment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiments/{experimentId}/status:
    get:
      summary: Get experiment status
      description: Get current status and metrics for an experiment
      operationId: getExperimentStatus
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The experiment ID
      responses:
        '200':
          description: Experiment status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentStatus'
        '404':
          description: Experiment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /experiments/{experimentId}/data:
    get:
      summary: Get experiment data
      description: Retrieve collected metrics data for an experiment
      operationId: getExperimentData
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The experiment ID
      responses:
        '200':
          description: Experiment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentData'
        '404':
          description: Experiment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      summary: Health check
      description: Check if the collector service is healthy
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  schemas:
    StartExperimentRequest:
      type: object
      required:
        - experimentId
      properties:
        experimentId:
          type: string
          format: uuid
          description: Unique identifier for the experiment
        description:
          type: string
          description: Optional description of the experiment
        timeout:
          type: integer
          minimum: 1
          maximum: 3600
          default: 300
          description: Experiment timeout in seconds (1-3600, default 300)
        collectionInterval:
          type: integer
          minimum: 100
          maximum: 10000
          default: 1000
          description: Data collection interval in milliseconds (100-10000, default 1000)

    ExperimentResponse:
      type: object
      required:
        - experimentId
        - status
        - timestamp
      properties:
        experimentId:
          type: string
          format: uuid
        status:
          type: string
          enum: [started, stopped, timeout]
        timestamp:
          type: string
          format: date-time
        message:
          type: string

    ExperimentListResponse:
      type: object
      required:
        - experiments
        - total
      properties:
        experiments:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentSummary'
        total:
          type: integer
          description: Total number of experiments matching the criteria
        hasMore:
          type: boolean
          description: Whether there are more experiments available

    ExperimentSummary:
      type: object
      required:
        - experimentId
        - status
        - startTime
        - isActive
      properties:
        experimentId:
          type: string
          format: uuid
        description:
          type: string
        status:
          type: string
          enum: [running, stopped, timeout, error]
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in seconds
        isActive:
          type: boolean
        dataPointsCollected:
          type: integer
          description: Number of metric data points collected

    ExperimentStatus:
      type: object
      required:
        - experimentId
        - status
        - startTime
        - isActive
      properties:
        experimentId:
          type: string
          format: uuid
        status:
          type: string
          enum: [running, stopped, timeout, error]
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        isActive:
          type: boolean
        duration:
          type: integer
          description: Duration in seconds
        dataPointsCollected:
          type: integer
          description: Number of metric data points collected
        lastMetrics:
          $ref: '#/components/schemas/SystemMetrics'

    ExperimentData:
      type: object
      required:
        - experimentId
        - startTime
        - metrics
      properties:
        experimentId:
          type: string
          format: uuid
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in seconds
        collectionInterval:
          type: integer
          description: Collection interval in milliseconds
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/MetricDataPoint'

    MetricDataPoint:
      type: object
      required:
        - timestamp
        - systemMetrics
      properties:
        timestamp:
          type: string
          format: date-time
        systemMetrics:
          $ref: '#/components/schemas/SystemMetrics'

    SystemMetrics:
      type: object
      required:
        - cpuUsagePercent
        - memoryUsageBytes
        - memoryUsagePercent
        - networkIOBytes
        - calculatorServiceHealthy
      properties:
        cpuUsagePercent:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: CPU usage percentage
        memoryUsageBytes:
          type: integer
          format: int64
          minimum: 0
          description: Memory usage in bytes
        memoryUsagePercent:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Memory usage percentage
        networkIOBytes:
          $ref: '#/components/schemas/NetworkIO'
        calculatorServiceHealthy:
          type: boolean
          description: Whether calculator service is responding

    NetworkIO:
      type: object
      required:
        - bytesReceived
        - bytesSent
        - packetsReceived
        - packetsSent
      properties:
        bytesReceived:
          type: integer
          format: int64
          minimum: 0
          description: Bytes received per second
        bytesSent:
          type: integer
          format: int64
          minimum: 0
          description: Bytes sent per second
        packetsReceived:
          type: integer
          format: int64
          minimum: 0
          description: Packets received per second
        packetsSent:
          type: integer
          format: int64
          minimum: 0
          description: Packets sent per second

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: integer
          description: Service uptime in seconds

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          additionalProperties: true
          description: Additional error details