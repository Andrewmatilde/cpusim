// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for RequestExperimentStatus.
const (
	RequestExperimentStatusCompleted RequestExperimentStatus = "completed"
	RequestExperimentStatusError     RequestExperimentStatus = "error"
	RequestExperimentStatusRunning   RequestExperimentStatus = "running"
	RequestExperimentStatusStopped   RequestExperimentStatus = "stopped"
)

// Defines values for RequestExperimentStatsStatus.
const (
	RequestExperimentStatsStatusCompleted RequestExperimentStatsStatus = "completed"
	RequestExperimentStatsStatusError     RequestExperimentStatsStatus = "error"
	RequestExperimentStatsStatusRunning   RequestExperimentStatsStatus = "running"
	RequestExperimentStatsStatusStopped   RequestExperimentStatsStatus = "stopped"
)

// Defines values for ListRequestExperimentsParamsStatus.
const (
	All       ListRequestExperimentsParamsStatus = "all"
	Completed ListRequestExperimentsParamsStatus = "completed"
	Error     ListRequestExperimentsParamsStatus = "error"
	Running   ListRequestExperimentsParamsStatus = "running"
	Stopped   ListRequestExperimentsParamsStatus = "stopped"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error 错误类型
	Error *string `json:"error,omitempty"`

	// ExperimentId 相关实验ID
	ExperimentId *string `json:"experimentId"`

	// Message 错误详细信息
	Message *string `json:"message,omitempty"`

	// Timestamp 错误时间
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status *string `json:"status,omitempty"`

	// Timestamp 健康检查时间
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Uptime 服务运行时间（秒）
	Uptime *int `json:"uptime,omitempty"`

	// Version 服务版本
	Version *string `json:"version,omitempty"`
}

// RequestExperiment defines model for RequestExperiment.
type RequestExperiment struct {
	// CreatedAt 创建时间
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description 实验描述
	Description *string `json:"description,omitempty"`

	// Duration 实验持续时间（秒）
	Duration *int `json:"duration"`

	// EndTime 实验结束时间
	EndTime *time.Time `json:"endTime"`

	// ExperimentId 实验ID
	ExperimentId *string `json:"experimentId,omitempty"`

	// Qps 每秒请求数（QPS）
	Qps *int `json:"qps,omitempty"`

	// StartTime 实验开始时间
	StartTime *time.Time `json:"startTime,omitempty"`

	// Status 实验状态
	Status *RequestExperimentStatus `json:"status,omitempty"`

	// TargetIP 目标CPU仿真服务IP地址
	TargetIP *string `json:"targetIP,omitempty"`

	// TargetPort 目标CPU仿真服务端口
	TargetPort *int `json:"targetPort,omitempty"`

	// Timeout 超时时间（秒）
	Timeout *int `json:"timeout,omitempty"`
}

// RequestExperimentStatus 实验状态
type RequestExperimentStatus string

// RequestExperimentListResponse defines model for RequestExperimentListResponse.
type RequestExperimentListResponse struct {
	Experiments *[]RequestExperiment `json:"experiments,omitempty"`

	// Total 总实验数量
	Total *int `json:"total,omitempty"`
}

// RequestExperimentStats defines model for RequestExperimentStats.
type RequestExperimentStats struct {
	// AverageResponseTime 平均响应时间（毫秒）
	AverageResponseTime *float32 `json:"averageResponseTime,omitempty"`

	// Duration 持续时间（秒）
	Duration *int `json:"duration,omitempty"`

	// EndTime 结束时间
	EndTime *time.Time `json:"endTime"`

	// ErrorRate 错误率（百分比）
	ErrorRate *float32 `json:"errorRate,omitempty"`

	// ExperimentId 实验ID
	ExperimentId *string `json:"experimentId,omitempty"`

	// FailedRequests 失败请求数
	FailedRequests *int `json:"failedRequests,omitempty"`

	// LastUpdated 最后更新时间
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`

	// MaxResponseTime 最大响应时间（毫秒）
	MaxResponseTime *float32 `json:"maxResponseTime,omitempty"`

	// MinResponseTime 最小响应时间（毫秒）
	MinResponseTime *float32 `json:"minResponseTime,omitempty"`

	// RequestsPerSecond 每秒请求数（QPS）
	RequestsPerSecond *float32 `json:"requestsPerSecond,omitempty"`

	// ResponseTimeP50 50%分位响应时间（毫秒）
	ResponseTimeP50 *float32 `json:"responseTimeP50,omitempty"`

	// ResponseTimeP95 95%分位响应时间（毫秒）
	ResponseTimeP95 *float32 `json:"responseTimeP95,omitempty"`

	// ResponseTimeP99 99%分位响应时间（毫秒）
	ResponseTimeP99 *float32 `json:"responseTimeP99,omitempty"`

	// StartTime 开始时间
	StartTime *time.Time `json:"startTime,omitempty"`

	// Status 实验状态
	Status *RequestExperimentStatsStatus `json:"status,omitempty"`

	// SuccessfulRequests 成功请求数
	SuccessfulRequests *int `json:"successfulRequests,omitempty"`

	// TotalRequests 总请求数
	TotalRequests *int `json:"totalRequests,omitempty"`
}

// RequestExperimentStatsStatus 实验状态
type RequestExperimentStatsStatus string

// StartRequestExperimentRequest defines model for StartRequestExperimentRequest.
type StartRequestExperimentRequest struct {
	// Description 实验描述
	Description *string `json:"description,omitempty"`

	// ExperimentId 实验唯一标识符
	ExperimentId string `json:"experimentId"`

	// Qps 每秒请求数（QPS）
	Qps int `json:"qps"`

	// TargetIP 目标CPU仿真服务IP地址
	TargetIP string `json:"targetIP"`

	// TargetPort 目标CPU仿真服务端口（通常为80）
	TargetPort int `json:"targetPort"`

	// Timeout 实验超时时间（秒）
	Timeout int `json:"timeout"`
}

// StopExperimentResult defines model for StopExperimentResult.
type StopExperimentResult struct {
	// Duration 运行时长（秒）
	Duration *int `json:"duration,omitempty"`

	// EndTime 停止时间
	EndTime *time.Time `json:"endTime,omitempty"`

	// ExperimentId 实验ID
	ExperimentId *string                 `json:"experimentId,omitempty"`
	FinalStats   *RequestExperimentStats `json:"finalStats,omitempty"`

	// StopStatus 停止状态
	StopStatus *string `json:"stopStatus,omitempty"`
}

// ListRequestExperimentsParams defines parameters for ListRequestExperiments.
type ListRequestExperimentsParams struct {
	// Status 按状态过滤实验
	Status *ListRequestExperimentsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Limit 返回的实验数量限制
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListRequestExperimentsParamsStatus defines parameters for ListRequestExperiments.
type ListRequestExperimentsParamsStatus string

// StartRequestExperimentJSONRequestBody defines body for StartRequestExperiment for application/json ContentType.
type StartRequestExperimentJSONRequestBody = StartRequestExperimentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListRequestExperiments request
	ListRequestExperiments(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartRequestExperimentWithBody request with any body
	StartRequestExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartRequestExperiment(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestExperimentStatus request
	GetRequestExperimentStatus(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestExperimentStats request
	GetRequestExperimentStats(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopRequestExperiment request
	StopRequestExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListRequestExperiments(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequestExperimentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRequestExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRequestExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRequestExperiment(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRequestExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestExperimentStatus(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestExperimentStatusRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestExperimentStats(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestExperimentStatsRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRequestExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRequestExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListRequestExperimentsRequest generates requests for ListRequestExperiments
func NewListRequestExperimentsRequest(server string, params *ListRequestExperimentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartRequestExperimentRequest calls the generic StartRequestExperiment builder with application/json body
func NewStartRequestExperimentRequest(server string, body StartRequestExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartRequestExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewStartRequestExperimentRequestWithBody generates requests for StartRequestExperiment with any type of body
func NewStartRequestExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequestExperimentStatusRequest generates requests for GetRequestExperimentStatus
func NewGetRequestExperimentStatusRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequestExperimentStatsRequest generates requests for GetRequestExperimentStats
func NewGetRequestExperimentStatsRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopRequestExperimentRequest generates requests for StopRequestExperiment
func NewStopRequestExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListRequestExperimentsWithResponse request
	ListRequestExperimentsWithResponse(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*ListRequestExperimentsResponse, error)

	// StartRequestExperimentWithBodyWithResponse request with any body
	StartRequestExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error)

	StartRequestExperimentWithResponse(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error)

	// GetRequestExperimentStatusWithResponse request
	GetRequestExperimentStatusWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetRequestExperimentStatusResponse, error)

	// GetRequestExperimentStatsWithResponse request
	GetRequestExperimentStatsWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetRequestExperimentStatsResponse, error)

	// StopRequestExperimentWithResponse request
	StopRequestExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopRequestExperimentResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)
}

type ListRequestExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequestExperimentListResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListRequestExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRequestExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartRequestExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RequestExperiment
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartRequestExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartRequestExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestExperimentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequestExperiment
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRequestExperimentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestExperimentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestExperimentStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequestExperimentStats
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRequestExperimentStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestExperimentStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopRequestExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StopExperimentResult
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StopRequestExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopRequestExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListRequestExperimentsWithResponse request returning *ListRequestExperimentsResponse
func (c *ClientWithResponses) ListRequestExperimentsWithResponse(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*ListRequestExperimentsResponse, error) {
	rsp, err := c.ListRequestExperiments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRequestExperimentsResponse(rsp)
}

// StartRequestExperimentWithBodyWithResponse request with arbitrary body returning *StartRequestExperimentResponse
func (c *ClientWithResponses) StartRequestExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error) {
	rsp, err := c.StartRequestExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRequestExperimentResponse(rsp)
}

func (c *ClientWithResponses) StartRequestExperimentWithResponse(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error) {
	rsp, err := c.StartRequestExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRequestExperimentResponse(rsp)
}

// GetRequestExperimentStatusWithResponse request returning *GetRequestExperimentStatusResponse
func (c *ClientWithResponses) GetRequestExperimentStatusWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetRequestExperimentStatusResponse, error) {
	rsp, err := c.GetRequestExperimentStatus(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestExperimentStatusResponse(rsp)
}

// GetRequestExperimentStatsWithResponse request returning *GetRequestExperimentStatsResponse
func (c *ClientWithResponses) GetRequestExperimentStatsWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetRequestExperimentStatsResponse, error) {
	rsp, err := c.GetRequestExperimentStats(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestExperimentStatsResponse(rsp)
}

// StopRequestExperimentWithResponse request returning *StopRequestExperimentResponse
func (c *ClientWithResponses) StopRequestExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopRequestExperimentResponse, error) {
	rsp, err := c.StopRequestExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRequestExperimentResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// ParseListRequestExperimentsResponse parses an HTTP response from a ListRequestExperimentsWithResponse call
func ParseListRequestExperimentsResponse(rsp *http.Response) (*ListRequestExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRequestExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestExperimentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartRequestExperimentResponse parses an HTTP response from a StartRequestExperimentWithResponse call
func ParseStartRequestExperimentResponse(rsp *http.Response) (*StartRequestExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartRequestExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RequestExperiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestExperimentStatusResponse parses an HTTP response from a GetRequestExperimentStatusWithResponse call
func ParseGetRequestExperimentStatusResponse(rsp *http.Response) (*GetRequestExperimentStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestExperimentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestExperiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestExperimentStatsResponse parses an HTTP response from a GetRequestExperimentStatsWithResponse call
func ParseGetRequestExperimentStatsResponse(rsp *http.Response) (*GetRequestExperimentStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestExperimentStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestExperimentStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStopRequestExperimentResponse parses an HTTP response from a StopRequestExperimentWithResponse call
func ParseStopRequestExperimentResponse(rsp *http.Response) (*StopRequestExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopRequestExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopExperimentResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取实验列表
	// (GET /experiments)
	ListRequestExperiments(c *gin.Context, params ListRequestExperimentsParams)
	// 启动请求发送实验
	// (POST /experiments)
	StartRequestExperiment(c *gin.Context)
	// 获取实验状态
	// (GET /experiments/{experimentId})
	GetRequestExperimentStatus(c *gin.Context, experimentId string)
	// 获取实验统计信息
	// (GET /experiments/{experimentId}/stats)
	GetRequestExperimentStats(c *gin.Context, experimentId string)
	// 停止请求发送实验
	// (POST /experiments/{experimentId}/stop)
	StopRequestExperiment(c *gin.Context, experimentId string)
	// 健康检查
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListRequestExperiments operation middleware
func (siw *ServerInterfaceWrapper) ListRequestExperiments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRequestExperimentsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRequestExperiments(c, params)
}

// StartRequestExperiment operation middleware
func (siw *ServerInterfaceWrapper) StartRequestExperiment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartRequestExperiment(c)
}

// GetRequestExperimentStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRequestExperimentStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRequestExperimentStatus(c, experimentId)
}

// GetRequestExperimentStats operation middleware
func (siw *ServerInterfaceWrapper) GetRequestExperimentStats(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRequestExperimentStats(c, experimentId)
}

// StopRequestExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopRequestExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopRequestExperiment(c, experimentId)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/experiments", wrapper.ListRequestExperiments)
	router.POST(options.BaseURL+"/experiments", wrapper.StartRequestExperiment)
	router.GET(options.BaseURL+"/experiments/:experimentId", wrapper.GetRequestExperimentStatus)
	router.GET(options.BaseURL+"/experiments/:experimentId/stats", wrapper.GetRequestExperimentStats)
	router.POST(options.BaseURL+"/experiments/:experimentId/stop", wrapper.StopRequestExperiment)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
