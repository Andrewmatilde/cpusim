// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for RequestExperimentStatus.
const (
	RequestExperimentStatusCompleted RequestExperimentStatus = "completed"
	RequestExperimentStatusError     RequestExperimentStatus = "error"
	RequestExperimentStatusRunning   RequestExperimentStatus = "running"
	RequestExperimentStatusStopped   RequestExperimentStatus = "stopped"
)

// Defines values for RequestExperimentStatsStatus.
const (
	RequestExperimentStatsStatusCompleted RequestExperimentStatsStatus = "completed"
	RequestExperimentStatsStatusError     RequestExperimentStatsStatus = "error"
	RequestExperimentStatsStatusRunning   RequestExperimentStatsStatus = "running"
	RequestExperimentStatsStatusStopped   RequestExperimentStatsStatus = "stopped"
)

// Defines values for StatusResponseStatus.
const (
	StatusResponseStatusPending StatusResponseStatus = "Pending"
	StatusResponseStatusRunning StatusResponseStatus = "Running"
)

// Defines values for ListRequestExperimentsParamsStatus.
const (
	ListRequestExperimentsParamsStatusAll       ListRequestExperimentsParamsStatus = "all"
	ListRequestExperimentsParamsStatusCompleted ListRequestExperimentsParamsStatus = "completed"
	ListRequestExperimentsParamsStatusError     ListRequestExperimentsParamsStatus = "error"
	ListRequestExperimentsParamsStatusRunning   ListRequestExperimentsParamsStatus = "running"
	ListRequestExperimentsParamsStatusStopped   ListRequestExperimentsParamsStatus = "stopped"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error 错误类型
	Error string `json:"error,omitempty"`

	// ExperimentId 相关实验ID
	ExperimentId string `json:"experimentId"`

	// Message 错误详细信息
	Message string `json:"message,omitempty"`

	// Timestamp 错误时间
	Timestamp time.Time `json:"timestamp"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status string `json:"status,omitempty"`

	// Timestamp 健康检查时间
	Timestamp time.Time `json:"timestamp,omitempty"`

	// Uptime 服务运行时间（秒）
	Uptime int `json:"uptime,omitempty"`

	// Version 服务版本
	Version string `json:"version,omitempty"`
}

// RequestExperiment defines model for RequestExperiment.
type RequestExperiment struct {
	// CreatedAt 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`

	// Description 实验描述
	Description string `json:"description,omitempty"`

	// Duration 实验持续时间（秒）
	Duration int `json:"duration"`

	// EndTime 实验结束时间
	EndTime time.Time `json:"endTime"`

	// ExperimentId 实验ID
	ExperimentId string `json:"experimentId,omitempty"`

	// Qps 每秒请求数（QPS）
	Qps int `json:"qps,omitempty"`

	// StartTime 实验开始时间
	StartTime time.Time `json:"startTime,omitempty"`

	// Status 实验状态
	Status RequestExperimentStatus `json:"status,omitempty"`

	// TargetIP 目标CPU仿真服务IP地址
	TargetIP string `json:"targetIP,omitempty"`

	// TargetPort 目标CPU仿真服务端口
	TargetPort int `json:"targetPort,omitempty"`

	// Timeout 超时时间（秒）
	Timeout int `json:"timeout,omitempty"`
}

// RequestExperimentStatus 实验状态
type RequestExperimentStatus string

// RequestExperimentListResponse defines model for RequestExperimentListResponse.
type RequestExperimentListResponse struct {
	Experiments []RequestExperiment `json:"experiments,omitempty"`

	// Total 总实验数量
	Total int `json:"total,omitempty"`
}

// RequestExperimentStats defines model for RequestExperimentStats.
type RequestExperimentStats struct {
	// AverageResponseTime 平均响应时间（毫秒）
	AverageResponseTime float32 `json:"averageResponseTime,omitempty"`

	// Duration 持续时间（秒）
	Duration int `json:"duration,omitempty"`

	// EndTime 结束时间
	EndTime time.Time `json:"endTime"`

	// ErrorRate 错误率（百分比）
	ErrorRate float32 `json:"errorRate,omitempty"`

	// ExperimentId 实验ID
	ExperimentId string `json:"experimentId,omitempty"`

	// FailedRequests 失败请求数
	FailedRequests int `json:"failedRequests,omitempty"`

	// LastUpdated 最后更新时间
	LastUpdated time.Time `json:"lastUpdated,omitempty"`

	// MaxResponseTime 最大响应时间（毫秒）
	MaxResponseTime float32 `json:"maxResponseTime,omitempty"`

	// MinResponseTime 最小响应时间（毫秒）
	MinResponseTime float32 `json:"minResponseTime,omitempty"`

	// RequestsPerSecond 每秒请求数（QPS）
	RequestsPerSecond float32 `json:"requestsPerSecond,omitempty"`

	// ResponseTimeP50 50%分位响应时间（毫秒）
	ResponseTimeP50 float32 `json:"responseTimeP50,omitempty"`

	// ResponseTimeP95 95%分位响应时间（毫秒）
	ResponseTimeP95 float32 `json:"responseTimeP95,omitempty"`

	// ResponseTimeP99 99%分位响应时间（毫秒）
	ResponseTimeP99 float32 `json:"responseTimeP99,omitempty"`

	// StartTime 开始时间
	StartTime time.Time `json:"startTime,omitempty"`

	// Status 实验状态
	Status RequestExperimentStatsStatus `json:"status,omitempty"`

	// SuccessfulRequests 成功请求数
	SuccessfulRequests int `json:"successfulRequests,omitempty"`

	// TotalRequests 总请求数
	TotalRequests int `json:"totalRequests,omitempty"`
}

// RequestExperimentStatsStatus 实验状态
type RequestExperimentStatsStatus string

// ServiceConfig 服务全局配置
type ServiceConfig struct {
	// Qps 每秒请求数（QPS）
	Qps int `json:"qps,omitempty"`

	// TargetIP 目标CPU仿真服务IP地址
	TargetIP string `json:"targetIP,omitempty"`

	// TargetPort 目标CPU仿真服务端口
	TargetPort int `json:"targetPort,omitempty"`

	// Timeout 默认超时时间（秒）
	Timeout int `json:"timeout,omitempty"`
}

// StartRequestExperimentRequest defines model for StartRequestExperimentRequest.
type StartRequestExperimentRequest struct {
	// Description 实验描述
	Description string `json:"description,omitempty"`

	// ExperimentId 实验唯一标识符
	ExperimentId string `json:"experimentId"`

	// Qps 每秒请求数（QPS）
	Qps int `json:"qps"`

	// Timeout 实验持续时间（秒）
	Timeout int `json:"timeout"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	// CurrentExperimentId 当前运行中的实验ID（如果没有实验在运行则为空）
	CurrentExperimentId string `json:"currentExperimentId,omitempty"`

	// Status 当前服务状态
	Status StatusResponseStatus `json:"status"`
}

// StatusResponseStatus 当前服务状态
type StatusResponseStatus string

// StopExperimentResult defines model for StopExperimentResult.
type StopExperimentResult struct {
	// Duration 运行时长（秒）
	Duration int `json:"duration,omitempty"`

	// EndTime 停止时间
	EndTime time.Time `json:"endTime,omitempty"`

	// ExperimentId 实验ID
	ExperimentId string                 `json:"experimentId,omitempty"`
	FinalStats   RequestExperimentStats `json:"finalStats,omitempty"`

	// StopStatus 停止状态
	StopStatus string `json:"stopStatus,omitempty"`
}

// ListRequestExperimentsParams defines parameters for ListRequestExperiments.
type ListRequestExperimentsParams struct {
	// Status 按状态过滤实验
	Status ListRequestExperimentsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Limit 返回的实验数量限制
	Limit int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListRequestExperimentsParamsStatus defines parameters for ListRequestExperiments.
type ListRequestExperimentsParamsStatus string

// StartRequestExperimentJSONRequestBody defines body for StartRequestExperiment for application/json ContentType.
type StartRequestExperimentJSONRequestBody = StartRequestExperimentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetServiceConfig request
	GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRequestExperiments request
	ListRequestExperiments(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartRequestExperimentWithBody request with any body
	StartRequestExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartRequestExperiment(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestExperimentStats request
	GetRequestExperimentStats(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopRequestExperiment request
	StopRequestExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetServiceConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRequestExperiments(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequestExperimentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRequestExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRequestExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRequestExperiment(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRequestExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestExperimentStats(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestExperimentStatsRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRequestExperiment(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRequestExperimentRequest(c.Server, experimentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetServiceConfigRequest generates requests for GetServiceConfig
func NewGetServiceConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRequestExperimentsRequest generates requests for ListRequestExperiments
func NewListRequestExperimentsRequest(server string, params *ListRequestExperimentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartRequestExperimentRequest calls the generic StartRequestExperiment builder with application/json body
func NewStartRequestExperimentRequest(server string, body StartRequestExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartRequestExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewStartRequestExperimentRequestWithBody generates requests for StartRequestExperiment with any type of body
func NewStartRequestExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequestExperimentStatsRequest generates requests for GetRequestExperimentStats
func NewGetRequestExperimentStatsRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopRequestExperimentRequest generates requests for StopRequestExperiment
func NewStopRequestExperimentRequest(server string, experimentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experimentId", runtime.ParamLocationPath, experimentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetServiceConfigWithResponse request
	GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error)

	// ListRequestExperimentsWithResponse request
	ListRequestExperimentsWithResponse(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*ListRequestExperimentsResponse, error)

	// StartRequestExperimentWithBodyWithResponse request with any body
	StartRequestExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error)

	StartRequestExperimentWithResponse(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error)

	// GetRequestExperimentStatsWithResponse request
	GetRequestExperimentStatsWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetRequestExperimentStatsResponse, error)

	// StopRequestExperimentWithResponse request
	StopRequestExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopRequestExperimentResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)
}

type GetServiceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceConfig
}

// Status returns HTTPResponse.Status
func (r GetServiceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRequestExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequestExperimentListResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListRequestExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRequestExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartRequestExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RequestExperiment
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartRequestExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartRequestExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestExperimentStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequestExperimentStats
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRequestExperimentStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestExperimentStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopRequestExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StopExperimentResult
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StopRequestExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopRequestExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponse
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetServiceConfigWithResponse request returning *GetServiceConfigResponse
func (c *ClientWithResponses) GetServiceConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceConfigResponse, error) {
	rsp, err := c.GetServiceConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceConfigResponse(rsp)
}

// ListRequestExperimentsWithResponse request returning *ListRequestExperimentsResponse
func (c *ClientWithResponses) ListRequestExperimentsWithResponse(ctx context.Context, params *ListRequestExperimentsParams, reqEditors ...RequestEditorFn) (*ListRequestExperimentsResponse, error) {
	rsp, err := c.ListRequestExperiments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRequestExperimentsResponse(rsp)
}

// StartRequestExperimentWithBodyWithResponse request with arbitrary body returning *StartRequestExperimentResponse
func (c *ClientWithResponses) StartRequestExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error) {
	rsp, err := c.StartRequestExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRequestExperimentResponse(rsp)
}

func (c *ClientWithResponses) StartRequestExperimentWithResponse(ctx context.Context, body StartRequestExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRequestExperimentResponse, error) {
	rsp, err := c.StartRequestExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRequestExperimentResponse(rsp)
}

// GetRequestExperimentStatsWithResponse request returning *GetRequestExperimentStatsResponse
func (c *ClientWithResponses) GetRequestExperimentStatsWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*GetRequestExperimentStatsResponse, error) {
	rsp, err := c.GetRequestExperimentStats(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestExperimentStatsResponse(rsp)
}

// StopRequestExperimentWithResponse request returning *StopRequestExperimentResponse
func (c *ClientWithResponses) StopRequestExperimentWithResponse(ctx context.Context, experimentId string, reqEditors ...RequestEditorFn) (*StopRequestExperimentResponse, error) {
	rsp, err := c.StopRequestExperiment(ctx, experimentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRequestExperimentResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// ParseGetServiceConfigResponse parses an HTTP response from a GetServiceConfigWithResponse call
func ParseGetServiceConfigResponse(rsp *http.Response) (*GetServiceConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRequestExperimentsResponse parses an HTTP response from a ListRequestExperimentsWithResponse call
func ParseListRequestExperimentsResponse(rsp *http.Response) (*ListRequestExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRequestExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestExperimentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartRequestExperimentResponse parses an HTTP response from a StartRequestExperimentWithResponse call
func ParseStartRequestExperimentResponse(rsp *http.Response) (*StartRequestExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartRequestExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RequestExperiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestExperimentStatsResponse parses an HTTP response from a GetRequestExperimentStatsWithResponse call
func ParseGetRequestExperimentStatsResponse(rsp *http.Response) (*GetRequestExperimentStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestExperimentStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestExperimentStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStopRequestExperimentResponse parses an HTTP response from a StopRequestExperimentWithResponse call
func ParseStopRequestExperimentResponse(rsp *http.Response) (*StopRequestExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopRequestExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopExperimentResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 获取服务配置
	// (GET /config)
	GetServiceConfig(c *gin.Context)
	// 获取实验列表
	// (GET /experiments)
	ListRequestExperiments(c *gin.Context, params ListRequestExperimentsParams)
	// 启动请求发送实验
	// (POST /experiments)
	StartRequestExperiment(c *gin.Context)
	// 获取实验统计信息
	// (GET /experiments/{experimentId}/stats)
	GetRequestExperimentStats(c *gin.Context, experimentId string)
	// 停止请求发送实验
	// (POST /experiments/{experimentId}/stop)
	StopRequestExperiment(c *gin.Context, experimentId string)
	// 健康检查
	// (GET /health)
	HealthCheck(c *gin.Context)
	// 获取服务状态
	// (GET /status)
	GetStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetServiceConfig operation middleware
func (siw *ServerInterfaceWrapper) GetServiceConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceConfig(c)
}

// ListRequestExperiments operation middleware
func (siw *ServerInterfaceWrapper) ListRequestExperiments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRequestExperimentsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRequestExperiments(c, params)
}

// StartRequestExperiment operation middleware
func (siw *ServerInterfaceWrapper) StartRequestExperiment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartRequestExperiment(c)
}

// GetRequestExperimentStats operation middleware
func (siw *ServerInterfaceWrapper) GetRequestExperimentStats(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRequestExperimentStats(c, experimentId)
}

// StopRequestExperiment operation middleware
func (siw *ServerInterfaceWrapper) StopRequestExperiment(c *gin.Context) {

	var err error

	// ------------- Path parameter "experimentId" -------------
	var experimentId string

	err = runtime.BindStyledParameterWithOptions("simple", "experimentId", c.Param("experimentId"), &experimentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter experimentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StopRequestExperiment(c, experimentId)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/config", wrapper.GetServiceConfig)
	router.GET(options.BaseURL+"/experiments", wrapper.ListRequestExperiments)
	router.POST(options.BaseURL+"/experiments", wrapper.StartRequestExperiment)
	router.GET(options.BaseURL+"/experiments/:experimentId/stats", wrapper.GetRequestExperimentStats)
	router.POST(options.BaseURL+"/experiments/:experimentId/stop", wrapper.StopRequestExperiment)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
	router.GET(options.BaseURL+"/status", wrapper.GetStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xab3PTRhr/Kp69u5mWMbFSmk7jmXvBcUybm7tDweFVydwIe5Oop3+sVgwZxjNOC8SB",
	"JA4QyF8IoUBcKHHSciHYCfkw55XkV3yFG+3KsmxJdgyBMvfOtnafffb3PM/v+WNdAWlV1lQFKlgHyStA",
	"T49BWaAfTyOkorNQ11RFh84PGlI1iLAI6WPoPHY+ZKCeRqKGRVUBSVCbX7JLJWu7Qh7cBHGAxzUIkkDH",
	"SFRGQTYO4GUNIlGGCh7IBHdbK7vk2m9k80Ht2fTAX0EcKIYkCRckCJIYGTBEngx1XRiFUYrYpadW5Xr1",
	"YN2cKIWpg0UZ6liQtSgB5sJObeEliIMRFckCBkmQETA87uwLysvGAYIXDRHBDEh+5xM+7C1VL3wP09g5",
	"+lsoSHgsGmAdC9hgUF8WZM3BAIzRPeNd3oRMPCHlV+ZPOXPtSVf3iQNDo08CIs3VGXJj3T6Ys9enmci3",
	"e3lr4/bbvamGGFHBcBQiR84liHS6M1yQNZU3V38Bcd9Ve3u4Hi4U4gCSZ+FFA+r4tOdaQTDTCAoYZk7i",
	"EHTyK6RS7hKXJhEBidR/zULBPtgK3Wwgoe3O6Qmr8iIIa0Qw+GCGSmYo1F5MsFW5Y95fa3/VjhHXPoJ9",
	"sRvYeVHTQxygVLA2btulV+b2D+bdrbd7+UE+FeVGOhYQbndDspcjGze7NGYj0kJBu7Fj5iYc31QM2Qlr",
	"ZCiKs9PZqGoazIA4ZVEJYvqZMeNwWIwKaBTiAT6M+DbNh5On+HPVyoG1usaiYoAnq1vkfg5EiuJVhA8p",
	"zHpeIoWfQlF1cFGNEEH2zjVzYadzfB8qKP8u6rhNOvHW0a8ihjL98EcER0AS/CHRyFMJN0klgnHfUERA",
	"SBin31UsSCFul6u4wXZ3qzZZeNdLpbDAFG6+jXAJImEU1q8b4bGvfyP3J8mdGVKe9zA2S889mD3vHZFU",
	"ATdUVAz5ArNcNJNEcUgXnHE0bEGrCAFHZmhrdtLRb+kNyV83S/OHvfm7s9CIIEow41oyLOofb9svn3iE",
	"FIqZJOj4nOYAkQlLaTkyN2uuvDTvbXXJRLJwub3POLIfb7yXz8ii0vmMrcJ7nYFcdHmIUjCtKpmueP8w",
	"8hsX4Pu4oPQ+7k8kf726P/Oe1/Ad098XPKa/7+iP6Q85pv8ojmmXPD/ptKkb6TTU9RFDio5aMz9Hbqy1",
	"j1qaCtqIyFXa7Q/LBymILolpeEpVRsTRqOKWXCuS7Vzt2oy1vwniLZmi25rIK5B7udArvnOF4au8+7/o",
	"6f3q657enl6OO9rawzvka66rQqRWWbQ3H0eVI57UE9whzeZEQiCXuz8Es3k3xX4DxlP8Ofvlmr2/b/7n",
	"pl26y9aBdyyoyXypupszH07apevWL0+bDkLw4nF4WTvOcb1HUXU3eZgsXBZlJ357OY6jucP92pX52rc1",
	"PvP5TzzxVacTW9rtJhwb2jAEhsPdABt6dE2aNhCCis9DQu2zf4dMzbBOuLr7wlq+Wi8+3u7lydMfzAer",
	"5q/r5uqUa8jVIltL8kvV3bL1c7mpLjsEu9Lz3Lhq5VgeKhnGsWddth3uNKRwzwnHR9X84aEbUlh0RNag",
	"jfHA3YN3rEHJxKr54lGXiek9akNRESSvpu+q92C7siy7paKMR6/TMJsXw42U2HHe4fwkKiMq9VBVwUKa",
	"GkURZJd1YilRNiRqkxiP1Lo1mzX5dmiIZ+FPCrdquQnmUG/3pqu7d2oLRWu+WC3PkrlbLUzOFjNeY9vP",
	"K+eVY8fYU5bjkseOnVeOx1gmcLctFf+bmxjkU9aLKbaIrBbdR3MlcqPoWDi3bB9MWrMl8uhHUlisTRbs",
	"zTfW/qYjy5zKeRFU3T+w5ovWyi6Zm3aizZdd6bE+AcnY0Mmz35we+tcAH69/5M+cHYrHBvlUPDY08I/T",
	"Z84NsRuQlTLZXGZ3aroH+8l+VSJvriZj/JnUUCyRFqS0AzFsLKju30nGrmRjn1k/l/+WOvNPUnptb69/",
	"3opEMtaCaOyztGboonxch+gSRJ8zbQb5lDm7QfI7rhJkrVwtzw7yKVJw+Jo9c5V9dMuanaQolQrV3Wfu",
	"rwsva8vzsT/HehODfCpmbdxurGDhxFYw+Ku7uerus1EVqQYWFeha2Wdf6i4HD8zZJ9W9RTJ9z1WLAeU8",
	"jA0hQdE1FeFq5Yk5XzKnJ2rPF8nrHVK4xTbSazyeseaL7Lu5/dBZWpirPV80cxv2j/vnFUrbmEaEG2Cx",
	"FFQyEMVO8gPAN0Z0x4PZOFA1qAiaCJLgRA/Xc8IpsAQ8RmMvkfbqslEYNt6YfUUK91wCD8RCi2+xGbJD",
	"YxF+zbjNYUYaeg71gG8gbi4RG8U+1fALjquHsTu2FDRNEtNUQuJ7nbEq45xOjNR8EKWJsGrUfxtKL7oh",
	"ywIa9/DwL6MLEi2zmTZYsjj1Y+k2A8tXSX7BXi8GEGJToRYu1akVkSBDDJEOkt8FpxtTjETtg0mz8tir",
	"rUTn4UUDonEQrzOim+DiPhgzcESguQwIktR1ixKnu8ISazABzpOVB15JwEZNtaU5kt+JUFYSZRGH69rX",
	"Uo51qI2GP6CrtZ/thbieW/swF8jGQd8RKtP8P1Wk35OlIhs4hTp9q4Kaqkf+VeCQmo81zXtb1vLVoM8H",
	"XD286wDetOQvamb8EKh4RUOrdlENR3M51Nou1Gv2ExyXjR+Watr2T9nmEhMjA2YDztj74ZyxjQOyWoOO",
	"Chwrf/kx3bDuIU7+rnuio0L/x1OhXvqSV7+SF4tk9VOLRWafkFBqTUOJK36nzib0esneLs/XMxH7T9iq",
	"rNmb604tNbMZlrcjCvwOiSmqW6dc7xQmDapvaVebA8Yfia1p5qMyu9vWRPkSQ7FeTTju/OXHdufq7swn",
	"6cxNXtcEU0dnVumf+BE5iHXE05Nkc/mweUfVwtLO/7Ujh84uohMDA9WXGH5fN/4dsoKTEygKn1pOoEpF",
	"5QT2Qkwk87N3XsJ7O/pSjDeKaQ4Z9m7OqTGY/veHbNlaXgGKxobqGgCm8VYPA6MxMmyTBsPBoD0wA4Pc",
	"ng5OM703qIL9bb29+oCh3DSmjUTJtWV0T+stcFbQaUsY89UHDzobPOisrQZxYCAJJMEYxloykZDUtCCN",
	"qTpOfs2B7HD2fwEAAP//RcL1mEknAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
